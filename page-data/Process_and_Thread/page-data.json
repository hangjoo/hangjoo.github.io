{"componentChunkName":"component---src-templates-blog-template-js","path":"/Process_and_Thread/","result":{"data":{"cur":{"id":"62352977-b351-59f3-a9f1-80c781af5f89","html":"<h2 id=\"process\" style=\"position:relative;\"><a href=\"#process\" aria-label=\"process permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Process</h2>\n<p>프로세스는 실제 실행되는 프로그램 인스턴스로, 고유의 메모리 영역과 시스템 자원 그리고 실행 환경을 가지고 있습니다.</p>\n<p>시스템에서 실행되는 기본 단위이며 한 프로세스는 병렬로 실행될 수 있는 하나 혹은 여러 개의 스레드를 가질 수 있습니다.</p>\n<p>운영체제는 CPU, 메모리와 같은 시스템 리소스를 프로세스 단위로 관리하며, 프로세스는 할당 받은 메모리를 힙 / 스택 / 데이터 / 텍스트 영역으로 나눠 사용합니다.</p>\n<p>각각의 프로세스는 데이터와 명령어를 위한 독립된 메모리 영역을 갖고, 프로세스는 독립적이기 때문에 다른 프로세스의 메모리 영역에 직접 접근할 수 없습니다. 다른 프로세스와 통신하기 위해서는 IPC(Inter-Process Communication)을 통해서 통신해야 합니다.</p>\n<p>프로세스에서 실제 실행되는 명령어가 나열된 스레드를 포함하고 있으며 각 스레드는 스레드 아이디와 프로그램 카운터, 레지스터 집합, 스택으로 구성되며 나머지 데이터, 힙, 텍스트(코드) 영역은 다른 스레드와 공유합니다.</p>\n<h3 id=\"pcb---process-control-block\" style=\"position:relative;\"><a href=\"#pcb---process-control-block\" aria-label=\"pcb   process control block permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PCB - Process Control Block</h3>\n<p>PCB는 프로세스에 대한 정보를 저장하고 있는 자료 구조로, 운영체제는 프로세스 관리를 위해 프로세스가 생성됨과 동시에 해당 프로세스에 대한 고유한 PCB를 생성합니다.</p>\n<p>CPU를 할당 받아 작업을 처리 중인 프로세스가 Context Switching이 발생하면 작업 진행 상황을 PCB에 저장한 뒤 다른 프로세스로 작업이 전환되게 됩니다.</p>\n<p>PCB에 저장되는 정보는 아래와 같습니다.</p>\n<ul>\n<li>프로세스 식별자 - Process ID\n<ul>\n<li>프로세스 마다 고유한 식별 번호</li>\n</ul>\n</li>\n<li>프로세스 상태 - Process State\n<ul>\n<li>프로세스의 상태를 저장</li>\n<li>New / Ready / Run / Wait(Block) / Complete(Terminated) / Suspended Ready / Suspended Block</li>\n</ul>\n</li>\n<li>프로그램 카운터\n<ul>\n<li>해당 프로세스가 다음에 실행할 명령어의 주소</li>\n</ul>\n</li>\n<li>CPU 레지스터</li>\n<li>CPU 스케쥴링 정보\n<ul>\n<li>잡 스케쥴러에서 사용하는 프로세스의 우선 순위에 대한 정보</li>\n</ul>\n</li>\n<li>메모리 관리 정보\n<ul>\n<li>페이지 테이블, 세그먼트 테이블 등</li>\n</ul>\n</li>\n<li>입출력 상태 정보\n<ul>\n<li>해당 프로세스에 할당된 입출력 장치 정보와 열려있는 파일 등</li>\n</ul>\n</li>\n<li>어카운팅 정보\n<ul>\n<li>프로세스 실행에 사용한 CPU 시간, 시간 제한, 실행 아이디 등</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"thread\" style=\"position:relative;\"><a href=\"#thread\" aria-label=\"thread permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Thread</h2>\n<p>경량화된 프로세스(Lightweight Process)로도 불리는 스레드는 같은 프로세스 내의 다른 스레드와 동시에 실행될 수 있는 실제 명령어 실행의 흐름(path)입니다. 스레드는 고유한 명령어 포인터와 프로그램 카운터, 스택 영역을 가지며, 같은 프로세스 내의 다른 스레드들과 데이터, 힙, 텍스트 영역을 공유합니다. 이러한 메모리 영역을 공유하기 때문에 프로세스를 여러 개 사용하는 것보다 더 빠르고 효율적인 장점을 가지고 있습니다.</p>\n<p>스레드는 프로세스와 마찬가지로 운영체제에 의해 관리되어 스레드들을 스케쥴링하고 프로세스 내의 스레드들이 올바르게 작동되도록 동기화 메커니즘을 사용하여 관리합니다.</p>\n<p>프로세스와 비교해 스레드는 메모리 공간을 공유한다는 점과 스레드르 생성하고 관리하는 작업은 프로세스보다 더 적은 메모리와 시스템 리소스를 사용하는 점으로 인해 더 빠르고 효율적인 장점이 있습니다. 그러나 프로세스 내 스레드들은 데이터를 공유하기 때문에 동기화 문제가 발생할 수 있다는 단점이 있습니다.</p>\n<h3 id=\"ultuser-level-thread\" style=\"position:relative;\"><a href=\"#ultuser-level-thread\" aria-label=\"ultuser level thread permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ULT(User Level Thread)</h3>\n<p>유저 수준의 라이브러리에 의해 구현된 스레드로, 시스템 콜에 의해 생성되지 않습니다.</p>\n<p>운영체제의 호출이나 커널에 인터럽트를 걸 필요 없이 스레드 스위칭(Thread Switching)이 발생할 수 있습니다.</p>\n<p>커널은 유저 레벨 스레드에 대한 정보를 가지고 있지 않으며 관리 또한 하지 않습니다.</p>\n<p>유저 레벨 스레드의 <strong>장점</strong>은</p>\n<ul>\n<li>운영체제가 멀티 쓰레드를 지원하지 않아도 사용할 수 있습니다.</li>\n<li>오직 프로그램 카운터와 레지스터 집합, 스택 영역만 가지고 있기 때문에 간단하게 표현될 수 있습니다.</li>\n<li>커널의 개입이 필요 없기 때문에 간단하게 생성할 수 있습니다.</li>\n<li>스케줄러와 동기화을 위한 커널 호출(System Call)을 하지 않기 때문에 빠르게 스레드 스위칭이 가능합니다.</li>\n</ul>\n<p>유저 레벨 스레드의 <strong>단점</strong>은</p>\n<ul>\n<li>스레드와 커널 간의 조정이 조정이 일어나지 않거나 드물게 일어납니다.</li>\n<li>한 스레드에서 커널 호출(System Call)을 하면 해당 프로세스 내 모든 스레드가 블락됩니다.</li>\n</ul>\n<h3 id=\"kltkernel-level-thread\" style=\"position:relative;\"><a href=\"#kltkernel-level-thread\" aria-label=\"kltkernel level thread permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>KLT(Kernel Level Thread)</h3>\n<p>커널 레벨 스레드는 커널에 의해 생성되고 관리되는 스레드입니다.</p>\n<p>프로세스가 생성되면 동시에 커널 레벨 스레드가 하나 생성됩니다.</p>\n<p>프로세스 내 스레드 테이블이 있는 유저 레벨 스레드와 다르개 커널 내에 스레드 테이블이 존재하고 시스템 내 모든 스레드를 추적하고 관리합니다.</p>\n<p>운영체제의 커널에서 제공하는 시스템 콜을 사용하여 커널 레벨 스레드를 생성하고 관리합니다.</p>\n<p>커널 레벨 스레드의 <strong>장점</strong>은</p>\n<ul>\n<li>커널이 관리하기 때문에 스케쥴러가 많은 커널 레벨 스레드를 포함하고 있는 프로세스에게 더 많은 작업 시간을 할당할 수 있도록 합니다.</li>\n<li>따라서 자주 블락되는 프로세스에게 적합합니다.</li>\n</ul>\n<p>커널 레벨 스레드의 <strong>단점</strong>은</p>\n<ul>\n<li>느리고 비효율적입니다.</li>\n<li>TCB(Thread Control Block)을 사용하기 때문에 오버헤드가 발생합니다.</li>\n</ul>\n<h2 id=\"multi-process-and-multi-thread\" style=\"position:relative;\"><a href=\"#multi-process-and-multi-thread\" aria-label=\"multi process and multi thread permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multi Process and Multi Thread</h2>\n<h3 id=\"multi-process\" style=\"position:relative;\"><a href=\"#multi-process\" aria-label=\"multi process permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multi Process</h3>\n<p>하나의 프로그램을 여러 개의 프로세스를 사용하여 각각 하나의 작업을 처리하는 것을 의미합니다.</p>\n<p>각 프로세스는 독립적이므로 프로세스마다 개별의 메모리 공간을 차지합니다. 그러나 독립적이기 때문에 하나의 프로세스에서 문제가 발생하더라도 다른 프로세스에는 영향이 없어 안정적인 장점이 있습니다.</p>\n<p>하지만 프로세스 간 Context Switching이 발생하는 경우 오버헤드가 크다는 단점과 멀티 스레드 방식과 비교하여 더 많은 메모리 공간을 차지한다는 단점이 있습니다. 또한 프로세스 간 통신을 하기 위해서는 비교적 복잡한 IPC(Inter-Process Communication)을 통해야 합니다.</p>\n<h3 id=\"multi-thread\" style=\"position:relative;\"><a href=\"#multi-thread\" aria-label=\"multi thread permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multi Thread</h3>\n<p>하나의 프로그램을 여러 개의 스레드를 사용하여 각각 하나의 작업을 처리하는 것을 의미합니다.</p>\n<p>하나의 프로세스 내부의 스레드들은 스택(Stack), 레지스터 셋(Register Set), 프로그램 카운터(Program Counter)를 제외한 메모리 영역을 공유합니다. 따라서 멀티 프로세스와 비교해 Context Switching 속도가 빠릅니다.</p>\n<p>또한 멀티 프로세스는 프로세스 간 통신을 하기 위해 IPC를 사용해야 하는 반면 멀티 스레드는 주소 영역을 공유하므로 간편하게 스레드 간 통신할 수 있습니다.</p>\n<p>그러나 메모리를 공유하기 때문에 동기화 문제에 주의해야 하고, 하나의 스레드에서 오류가 발생하는 경우 프로세스 전체에 영향을 끼치므로 다른 스레드도 문제가 발생합니다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#process\">Process</a></p>\n<ul>\n<li><a href=\"#pcb---process-control-block\">PCB - Process Control Block</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#thread\">Thread</a></p>\n<ul>\n<li><a href=\"#ultuser-level-thread\">ULT(User Level Thread)</a></li>\n<li><a href=\"#kltkernel-level-thread\">KLT(Kernel Level Thread)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#multi-process-and-multi-thread\">Multi Process and Multi Thread</a></p>\n<ul>\n<li><a href=\"#multi-process\">Multi Process</a></li>\n<li><a href=\"#multi-thread\">Multi Thread</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"Process 프로세스는 실제 실행되는 프로그램 인스턴스로, 고유의 메모리 영역과 시스템 자원 그리고 실행 환경을 가지고 있습니다. 시스템에서 실행되는 기본 단위이며 한 프로세스는 병렬로 실행될 수 있는 하나 혹은 여러 개의 스레드를 가질 수 있습니다. 운영체제는 CPU, 메모리와 같은 시스템 리소스를 프로세스 단위로 관리하며, 프로세스는 할당 받은 메모리를 힙 / 스택 / 데이터 / 텍스트 영역으로 나눠 사용합니다. 각각의 프로세스는 데이터와 명령어를 위한 독립된 메모리 영역을 갖고, 프로세스는 독립적이기 때문에 다른 프로세스의 메모리 영역에 직접 접근할 수 없습니다. 다른 프로세스와 통신하기 위해서는 IPC(Inter-Process Communication)을 통해서 통신해야 합니다. 프로세스에서 실제 실행되는 명령어가 나열된 스레드를 포함하고 있으며 각 스레드는 스레드 아이디와 프로그램 카운터, 레지스터 집합, 스택으로 구성되며 나머지 데이터, 힙, 텍스트(코드) 영역은 다른…","frontmatter":{"date":"January 13, 2023","title":"Process and Thread","categories":"OS","author":"hangjoo","emoji":""},"fields":{"slug":"/Process_and_Thread/"}},"next":null,"prev":null,"site":{"siteMetadata":{"siteUrl":"https://hangjoo.github.io","comments":{"utterances":{"repo":"hangjoo/utterances-comment"}}}}},"pageContext":{"slug":"/Process_and_Thread/","nextSlug":"","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}
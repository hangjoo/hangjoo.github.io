{"componentChunkName":"component---src-templates-blog-post-js","path":"/python/functools-in-python/","result":{"data":{"site":{"siteMetadata":{"title":"JooWorld","author":"hangjoo","siteUrl":"https://hangjoo.github.io","comment":{"disqusShortName":"","utterances":"hangjoo/utterances-comment"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"95938e83-ea13-51ce-832d-82e23eb9e1c6","excerpt":"Introduction 파이썬에서 기본적으로 제공하는 모듈 중 하나인  모듈은 고차 함수(high-order function) 작업을 편리하게 할 수 있는 유용한 기능을 제공합니다. 고차 함수란 함수를 반환하거나 함수를 인자로 받는 함수를 의미하며, 고차 함수를 사용하여 함수나 호출 가능한 객체를 쉽게 재사용하거나 확장할 수 있어 유지보수가 용이한 코드를 작성할 수 있다는 장점이 있습니다. Functions functools에서 제공하는 기능들은 아래와 같습니다. cache 파이썬 3.…","html":"<h1 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h1>\n<p>파이썬에서 기본적으로 제공하는 모듈 중 하나인 <code class=\"language-text\">functools</code> 모듈은 고차 함수(high-order function) 작업을 편리하게 할 수 있는 유용한 기능을 제공합니다. 고차 함수란 함수를 반환하거나 함수를 인자로 받는 함수를 의미하며, 고차 함수를 사용하여 함수나 호출 가능한 객체를 쉽게 재사용하거나 확장할 수 있어 유지보수가 용이한 코드를 작성할 수 있다는 장점이 있습니다.</p>\n<h1 id=\"functions\" style=\"position:relative;\"><a href=\"#functions\" aria-label=\"functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions</h1>\n<p><strong>functools</strong>에서 제공하는 기능들은 아래와 같습니다.</p>\n<h2 id=\"cache\" style=\"position:relative;\"><a href=\"#cache\" aria-label=\"cache permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cache</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> cache\n\n<span class=\"token decorator annotation punctuation\">@cache</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">some_fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>파이썬 3.9 버전에 추가된 데코레이터로, 인자에 대한 함수 결과를 캐싱하여 동일한 인자로 함수가 다시 호출되었을 때 캐싱된 결과를 반환하는 함수입니다. 이 데코레이터는 함수의 결과를 캐시하기 위해 내부적으로 딕셔너리를 사용하여 저장합니다.</p>\n<p><code class=\"language-text\">cache</code> 데코레이터는 <strong>함수의 인자 값을 키로 사용하여 함수의 결과를 캐싱하기 때문에 함수의 인자는 불변형(immutable)이어야 합니다.</strong> 만약 리스트나 딕셔너리와 같이 가변형 파라미터를 사용하는 함수를 사용하는 경우 캐시에 문제가 발생할 수 있습니다. <strong>또 동일한 인자에 대해 다른 함수 결과를 반환할 가능성이 있는 경우에 <code class=\"language-text\">cache</code> 데코레이터를 사용하는 경우에도 문제가 발생할 수 있습니다.</strong></p>\n<p>또한 내부적으로 함수 결과를 딕셔너리를 사용해서 저장하기 때문에 <strong>메모리 사용량</strong>에 유의해야 합니다.</p>\n<p>추가로 함수 결과를 저장할 때 전달된 인자 기준으로 함수 결과가 저장되기 때문에 키워드 인자를 사용하는 경우 예상한 캐시 결과가 반환되지 않을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> cache\n<span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep\n\n<span class=\"token decorator annotation punctuation\">@cache</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">sleep_add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> sleep_time<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    sleep<span class=\"token punctuation\">(</span>sleep_time<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n\n<span class=\"token comment\"># 아래 4번의 호출 모두 캐싱된 결과를 사용하지 않고 5초 후 덧셈 결과가 출력됩니다.</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sleep_add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sleep_add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sleep_add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> sleep_time<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sleep_add<span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> sleep_time<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 코드의 주석과 같이 실제 함수 인자는 동일한 값이 전달되나 내부 딕셔너리에 결과를 저장되는 키 값이 모두 달라지기 때문에 5초 후 덧셈 결과가 출력됩니다. <strong>이와 같은 결과가 발생하는 이유는 <code class=\"language-text\">cache</code> 데코레이터가 내부적으로 함수에 전달된 인자를 전달 받을 때 <code class=\"language-text\">*args, **kwargs</code> 와 같이 인자를 전달 받기 때문에 실제 함수에 키워드를 사용하냐 아니냐에 따라 <code class=\"language-text\">args</code> 또는 <code class=\"language-text\">kwargs</code> 에 전달되기 때문에 생성되는 키 값이 달라집니다.</strong> 따라서 <code class=\"language-text\">cache</code> 데코레이터를 사용하는 경우 이러한 키워드 인자에도 유의해야 합니다.</p>\n<h2 id=\"cached_property\" style=\"position:relative;\"><a href=\"#cached_property\" aria-label=\"cached_property permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cached_property</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> cached_property\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeClass</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@cached_property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">some_property</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>파이썬 3.8 버전에 추가된 데코레이터로, <code class=\"language-text\">cached_property</code>는 클래스에서 사용되는 <code class=\"language-text\">property</code>와 동일하게 동작하지만 <strong>반환 값을 캐싱한다는 점</strong>이 다릅니다. 클래스의 속성을 반환하는 <code class=\"language-text\">property</code>에서 속성을 반환하는데 오랜 시간이 걸릴 때 주로 사용합니다.</p>\n<p>다만 기존의 <code class=\"language-text\">property</code> 데코레이터는 <code class=\"language-text\">setter</code>가 정의되지 않은 경우 속성 값 쓰기가 금지된 반면, <code class=\"language-text\">**cached_property</code> 데코레이터는 <code class=\"language-text\">setter</code> 정의 없이도 해당 속성에 쓰기가 가능합니다.**</p>\n<p>캐시 된 값을 삭제할 필요가 있는 경우에는 해당 속성 값을 삭제하여 캐시 된 속성 값을 삭제할 수 있습니다.</p>\n<h2 id=\"lru_cache\" style=\"position:relative;\"><a href=\"#lru_cache\" aria-label=\"lru_cache permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lru_cache</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> lru_cache\n\n<span class=\"token decorator annotation punctuation\">@lru_cache</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">some_fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token decorator annotation punctuation\">@lru_cache</span><span class=\"token punctuation\">(</span>max_size<span class=\"token operator\">=</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> typed<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">some_fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>파이썬 3.2 버전에 추가된 데코레이터로, <code class=\"language-text\">cache</code> 데코레이터와 동일하게 함수의 결과 값을 캐싱하는 데코레이터입니다. <strong>다만 최대 <code class=\"language-text\">maxsize</code>만큼의 함수 결과 값을 저장한다는 점이 다릅니다. 동일하게 함수 결과 값을 캐시하는데 내부적으로 딕셔너리를 사용하기 때문에 함수의 인자는 해시 가능한 불변형이어야 합니다.</strong></p>\n<p>또한 키워드 인자를 사용 여부에 따라서도 다른 키 값을 갖습니다. 즉 서로 다른 인자 패턴에 대해 별도의 캐시 항목을 갖기 때문에 키워드 인자 사용에 유의가 필요합니다. 에를 들어 <code class=\"language-text\">f(a=1, b=2)</code>와 <code class=\"language-text\">f(b=2, a=1)</code>은 인자 값은 다르나 인자의 순서가 다르기 때문에 별도의 캐시 항목을 갖습니다.</p>\n<p>위 코드의 두 번째 예시처럼 <code class=\"language-text\">lru_cache</code> 사용시 <code class=\"language-text\">max_size</code> 인자와 <code class=\"language-text\">typed</code> 인자를 전달할 수 있습니다.</p>\n<p><code class=\"language-text\">max_size</code> 인자는 몇 개의 캐시를 저장할지 나타내는 인자로 기본 값은 128이며, None으로 설정할 시 LRU 기능이 비활성화되고 캐시를 제한 없이 저장합니다. 만약 저장된 캐시의 수가 <code class=\"language-text\">max_size</code>에 도달하면 LRU 알고리즘에 의해 가장 오래된 캐시 값이 삭제됩니다.</p>\n<p><code class=\"language-text\">typed</code> 인자는 인자의 타입을 확인하는 인자로 True인 경우 같은 값을 같더라도 서로 다른 타입인 경우 별도의 캐시 값을 갖습니다. 예를 들어, <code class=\"language-text\">f(3)</code>과 <code class=\"language-text\">f(3.0)</code>은 <code class=\"language-text\">typed=True</code>인 경우 다른 캐시 값을 갖습니다.</p>\n<h2 id=\"total_ordering\" style=\"position:relative;\"><a href=\"#total_ordering\" aria-label=\"total_ordering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>total_ordering</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> total_ordering\n\n<span class=\"token decorator annotation punctuation\">@total_ordering</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeClass</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__lt__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>파이썬 3.2 버전에 추가된 데코레이터로, 클래스의 매직 메소드 중 비교하는데 사용되는 매직 메소드가 정의되어 있는 경우 비교하는데 사용되는 나머지 매직 메소드를 제공하는 데코데이터입니다.</p>\n<p>비교하는데 사용되는 매직 메소드는 <code class=\"language-text\">__lt__</code>, <code class=\"language-text\">__le__</code>, <code class=\"language-text\">__gt__</code>, <code class=\"language-text\">__ge__</code> 그리고 <code class=\"language-text\">__eq__</code> 입니다. <code class=\"language-text\">__eq__</code> 메소드와 앞의 4개의 메소드 중 하나라도 구현이 된 상태에서 <code class=\"language-text\">total_ordering</code> 데코레이터를 사용하면 해당 데코레이터가 나머지 메소드를 제공합니다.</p>\n<p>이 데코레이터를 사용하면 모든 비교 연산에서 동작하는 클래스를 쉽게 구현할 수 있으나, 제공된 매직 메소드에서 실행 속도가 느려지고, 스택 트레이스(stack trace)가 복잡해지는 단점이 있습니다. 따라서 성능 벤치마킹 시에 이 부분이 병목임이 확인되면 <code class=\"language-text\">total_ordering</code> 데코레이터를 사용하지 않고 매직 메소드를 모두 구현하는 것이 바람직합니다.</p>","frontmatter":{"title":"Functools in Python","date":"February 18, 2023"}}},"pageContext":{"slug":"/python/functools-in-python/","previous":{"fields":{"slug":"/python/itertools-in-python/"},"frontmatter":{"title":"Itertools in Python"}},"next":null}}}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/python/itertools-in-python/","result":{"data":{"site":{"siteMetadata":{"title":"JooWorld","author":"hangjoo","siteUrl":"https://hangjoo.github.io","comment":{"disqusShortName":"","utterances":"hangjoo/utterances-comment"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"a7b1e47b-61c7-5af8-81d6-e1fabc4b78c2","excerpt":"Introduction 파이썬에서 기본으로 제공하는 모듈로, 이터레이터(iterator)와 관련된 기능을 제공합니다. 인자로 전달된 반복가능한 객체를 기반으로 무한히 반복하는 이터레이터를 생성하거나 특정 기능이 적용된 이터레이터를 생성할 수 있습니다. 예를 들어, itertools에서 제공하는 함수 중  함수는 x부터 하나씩 순차적으로 증가하는 이터레이터를 반환합니다. itertools…","html":"<h1 id=\"introduction\" style=\"position:relative;\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h1>\n<p>파이썬에서 기본으로 제공하는 모듈로, <strong>이터레이터(iterator)</strong>와 관련된 기능을 제공합니다. 인자로 전달된 <strong>반복가능한 객체</strong>를 기반으로 무한히 반복하는 이터레이터를 생성하거나 특정 기능이 적용된 이터레이터를 생성할 수 있습니다. 예를 들어, itertools에서 제공하는 함수 중 <code class=\"language-text\">count(x)</code> 함수는 x부터 하나씩 순차적으로 증가하는 이터레이터를 반환합니다.</p>\n<p>itertools에서 제공하는 함수들은 <strong>빠르고 메모리 효율적</strong>으로 동작하도록 구현되어 있어 이터레이터 관련해서 작업이 필요할 때 성능에 대한 고민 없이 itertools에서 제공하는 기능의 조합으로 빠르게 구현할 수 있습니다.</p>\n<h2 id=\"iterable-and-iterator\" style=\"position:relative;\"><a href=\"#iterable-and-iterator\" aria-label=\"iterable and iterator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Iterable and Iterator</h2>\n<p>파이썬에서 <strong>iterable</strong>은 반복 가능한 혹은 반복 가능한 객체를 의미합니다. 대표적인 반복 가능한 객체(Iterable Object)는 리스트, 문자열, 튜플 등이 있습니다. 이러한 반복가능한 객체는 <code class=\"language-text\">iter(iterable)</code> 함수를 통해 <strong>이터레이터(Iterator)</strong>로 변환할 수 있습니다. <code class=\"language-text\">iter()</code> 함수는 인자로 전달된 반복 가능한 객체 내부의 매직 메소드인 <code class=\"language-text\">__iter__</code> 함수를 호출하여 이터레이터를 생성합니다. 만약 <code class=\"language-text\">__iter__</code> 함수가 정의되어 있지 않은 경우 또 다른 매직 메소드인 <code class=\"language-text\">__getitem__</code>을 호출하여 첫 번째 인덱스부터 순차적으로 항목을 꺼내옵니다.</p>\n<p>이렇게 생성된 이터레이터는 <code class=\"language-text\">next(iterator)</code> 함수를 통해 순차적으로 객체 내부의 항목에 접근할 수 있습니다. <code class=\"language-text\">next()</code>를 사용하여 호출된 이터레이터는 클래스 내부에 구현된 매직 메소드 <code class=\"language-text\">__next__</code>를 호출하여 객체 내부의 항목에 접근합니다. <code class=\"language-text\">next()</code> 함수를 사용하여 이터레이터의 모든 항목을 꺼낸 뒤 한 번 더 호출하면 <code class=\"language-text\">StopIteration</code> 예외를 발생시킵니다.</p>\n<p>아래는 하나의 리스트를 생성하고, 이를 이터레이터로 변한한 뒤 모든 항목을 꺼낸 뒤 발생된 예외를 확인하는 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">a_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\na_iterator <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>a_list<span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>a_iter<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1</span>\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>a_iter<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2</span>\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>a_iter<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 3</span>\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>a_iter<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 4</span>\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>a_iter<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 5</span>\n<span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>a_iter<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># StopIternation 예외 발생</span></code></pre></div>\n<h1 id=\"functions\" style=\"position:relative;\"><a href=\"#functions\" aria-label=\"functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions</h1>\n<p><strong>itertools</strong>에서 제공하는 함수들은 아래와 같습니다.</p>\n<h2 id=\"accumulate\" style=\"position:relative;\"><a href=\"#accumulate\" aria-label=\"accumulate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>accumulate</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> accumulate\n\naccumulate<span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">,</span> func<span class=\"token operator\">=</span>operator<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> initial<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">accumulate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>                <span class=\"token comment\"># 1   3   6   10  15</span>\naccumulate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> initial<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 100 101 103 106 110 115</span>\naccumulate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> operator<span class=\"token punctuation\">.</span>mul<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1   2   6   24  120</span></code></pre></div>\n<p><code class=\"language-text\">iterable</code> 인자에 대해 계산된 함수 <code class=\"language-text\">func</code>의 누적 결과를 반환하는 이터레이터를 반환합니다.</p>\n<p>func로 전달되는 함수는 두 개의 인자를 전달 받는 함수로 첫 번째 인자에 현재 누적 결과와 두 번째 인자에 새롭게 누적할 iterable 인자의 항목이 전달됩니다. func의 기본 인자인 operator.add는 두 인자의 덧셈 결과를 반환하는 함수입니다.</p>\n<p><code class=\"language-text\">initial</code> 인자가 전달되는 경우 initial 값부터 누적이 시작되어 반환된 이터레이터가 iterable보다 항목가 하나 더 많고, 기본 값인 None인 경우 iterable의 첫 번째 항목을 누적 결과 시작으로 사용합니다.</p>\n<h2 id=\"chain\" style=\"position:relative;\"><a href=\"#chain\" aria-label=\"chain permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>chain</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> chain\n\nchain<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iterables<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># case 1</span>\nchain<span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"z\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># a b c 1 2 3 x y z</span>\n\n<span class=\"token comment\"># case 2</span>\narray_2d <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nchain<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>array_2d<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0 1 2 3 4 5 6 7 8 9</span></code></pre></div>\n<p>첫 번째로 전달된 반복가능한 객체에서 항목을 꺼내고 모든 항목을 꺼내면 다음 객체로 넘어가 항목을 꺼내오는 이터레이터를 생성합니다. 보통 여러 시퀀스를 하나로 연결한 단일 시퀀스처럼 처리하는 경우 사용합니다.</p>\n<h2 id=\"combinations\" style=\"position:relative;\"><a href=\"#combinations\" aria-label=\"combinations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>combinations</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> combinations\n\ncombinations<span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># case 1</span>\ncombinations<span class=\"token punctuation\">(</span><span class=\"token string\">\"ABCD\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># AB AC AD BC BD CD</span>\n\n<span class=\"token comment\"># case 2</span>\ncombinations<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 012 013 023 123</span></code></pre></div>\n<p>첫 번째 인자 <code class=\"language-text\">iterable</code>의 항목들을 사용하여 길이 <code class=\"language-text\">r</code>이 되는 조합을 항목으로 갖는 이터레이터를 반환합니다.</p>\n<h2 id=\"combinations_with_replacement\" style=\"position:relative;\"><a href=\"#combinations_with_replacement\" aria-label=\"combinations_with_replacement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>combinations_with_replacement</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> combinations_with_replacement\n\ncombinations_with_replacement<span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">combinations_with_replacement<span class=\"token punctuation\">(</span><span class=\"token string\">\"ABC\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># AA AB AC BB BC CC</span></code></pre></div>\n<p>첫 번째 인자 <code class=\"language-text\">iterable</code>의 항목들을 <strong>중복으로</strong> 사용하여 길이 <code class=\"language-text\">r</code>이 되는 모든 조합을 항목으로 갖는 이터레이터를 반환합니다.</p>\n<h2 id=\"compress\" style=\"position:relative;\"><a href=\"#compress\" aria-label=\"compress permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>compress</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> compress\n\ncompress<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> selectors<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># case 1</span>\ncompress<span class=\"token punctuation\">(</span><span class=\"token string\">\"ABCDEF\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A C E F</span>\n\n<span class=\"token comment\"># case 2</span>\ncompress<span class=\"token punctuation\">(</span><span class=\"token string\">\"ABCDEF\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A C</span>\n\n<span class=\"token comment\"># case 3</span>\ncompress<span class=\"token punctuation\">(</span><span class=\"token string\">\"ABC\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A C</span></code></pre></div>\n<p><code class=\"language-text\">data</code> 인자와 <code class=\"language-text\">selectors</code> 인자의 항목들을 같이 순회하면서 <code class=\"language-text\">selectors</code> 의 항목이 True인 <code class=\"language-text\">data</code> 의 항목만을 요소로 갖는 이터레이터를 반환합니다. 만약 <code class=\"language-text\">data</code> 인자와 <code class=\"language-text\">selectors</code> 인자의 길이가 같지 않으면 더 짧은 인자까지만 순회하고 중지합니다.</p>\n<h2 id=\"count\" style=\"position:relative;\"><a href=\"#count\" aria-label=\"count permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>count</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> count\n\ncount<span class=\"token punctuation\">(</span>start<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> step1<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># case 1</span>\ncount<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 10 11 12 13 14 ...</span>\n\n<span class=\"token comment\"># case 2</span>\ncount<span class=\"token punctuation\">(</span><span class=\"token number\">2.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2.5 3.0 3.5 4.0 ...</span></code></pre></div>\n<p><code class=\"language-text\">start</code> 인자부터 시작하여 <code class=\"language-text\">step</code>만큼 증가하는 무한한 이터레이터를 반환합니다.</p>\n<h2 id=\"cycle\" style=\"position:relative;\"><a href=\"#cycle\" aria-label=\"cycle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cycle</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> cycle\n\ncycle<span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># case 1</span>\ncycle<span class=\"token punctuation\">(</span><span class=\"token string\">\"ABCD\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A B C D A B C D A B ...</span>\n\n<span class=\"token comment\"># case 2</span>\ncycle<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1 2 3 1 2 3 1 2 ...</span></code></pre></div>\n<p><code class=\"language-text\">iterable</code> 인자의 항목을 무한히 순회하는 이터레이터를 반환합니다.</p>\n<h2 id=\"groupby\" style=\"position:relative;\"><a href=\"#groupby\" aria-label=\"groupby permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>groupby</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> groupby\n\ngroupby<span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># case 1</span>\ngroupby<span class=\"token punctuation\">(</span><span class=\"token string\">\"AAAABBBCCDAA\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (A, AAAA) (B, BBB) (C, CC) (D, D) (A, AA)</span>\n\n<span class=\"token comment\"># case 2</span>\n<span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> group <span class=\"token keyword\">in</span> groupby<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 1, [1, 1, 1]</span>\n  <span class=\"token comment\"># 2, [2, 2]</span>\n  <span class=\"token comment\"># 3, [3, 3, 3]</span>\n\n<span class=\"token comment\"># case 3</span>\n<span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> g <span class=\"token keyword\">in</span> groupby<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># 1 [1, 1]</span>\n  <span class=\"token comment\"># 0 [2, 4, 6]</span>\n  <span class=\"token comment\"># 1 [9, 11]</span>\n  <span class=\"token comment\"># 0 [14, 14]</span></code></pre></div>\n<p><code class=\"language-text\">iterable</code> 인자에서 연속된 항목끼리 그룹으로 묶은 항목을 갖는 이터레이터를 반환합니다. 반환된 이터레이터 항목의 첫 번째 원소는 그룹으로 묶인 항목을 반환하고, 두 번째 원소는 묶인 그룹에 대한 이터레이터를 갖습니다.</p>\n<p><code class=\"language-text\">key</code> 인자는 그룹으로 묶을 때 사용되는 함수로 하나의 인자를 가지며 <code class=\"language-text\">iterable</code> 인자의 항목이 전달됩니다. <code class=\"language-text\">key</code> 인자로 전달된 함수를 통해 같은 값을 갖는 항목이 연속으로 존재하는 경우 그룹으로 묶이며 기본 값인 None은 항목 자체를 그대로 사용합니다.</p>\n<h2 id=\"permutations\" style=\"position:relative;\"><a href=\"#permutations\" aria-label=\"permutations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>permutations</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> permutations\n\npermutations<span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">,</span> r<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">permutations<span class=\"token punctuation\">(</span><span class=\"token string\">\"ABCD\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># AB AC AD BA BC BD CA CB CD DA DB DC</span></code></pre></div>\n<p>첫 번째 인자 <code class=\"language-text\">iterable</code>의 항목을 사용하여 길이 <code class=\"language-text\">r</code>이 되는 모든 순열을 갖는 이터레이터를 반환합니다. <code class=\"language-text\">r</code> 인자를 따로 지정하지 않는 경우 <code class=\"language-text\">iterable</code> 인자의 길이를 사용합니다.</p>\n<h2 id=\"product\" style=\"position:relative;\"><a href=\"#product\" aria-label=\"product permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>product</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> product\n\nproduct<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iterables<span class=\"token punctuation\">,</span> repeat<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># case 1</span>\nproduct<span class=\"token punctuation\">(</span><span class=\"token string\">\"ABCD\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xy\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Ax Ay Bx By Cx Cy Dx Dy</span>\n\n<span class=\"token comment\"># case 2</span>\nproduct<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> repeat<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 000 001 010 011 100 101 110 111</span>\n\n<span class=\"token comment\"># case 3</span>\nproduct<span class=\"token punctuation\">(</span><span class=\"token string\">\"AB\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> repeat<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># A0A0 A0A1 A0B0 A0B1 A1A0 A1A1 ...</span></code></pre></div>\n<p><code class=\"language-text\">*iterables</code> 인자로 전달된 모든 iterable 객체들 간의 데카르트 곱 결과를 항목으로 갖는 이터레이터를 반환합니다. 모든 iterable 객체를 순회하는 for-루프와 동일한 결과를 반환합니다. 예를 들어, <code class=\"language-text\">product(A, B)</code> 는 <code class=\"language-text\">(x, y) for x in A for y in B</code> 와 같은 결과를 갖습니다.</p>\n<p><code class=\"language-text\">repeat</code> 인자는 전달된 <code class=\"language-text\">*iterables</code> 인자를 <code class=\"language-text\">repeat</code> 반복한 데카르트 곱 결과를 계산할 때 사용합니다.</p>","frontmatter":{"title":"Itertools in Python","date":"January 25, 2023"}}},"pageContext":{"slug":"/python/itertools-in-python/","previous":null,"next":{"fields":{"slug":"/computer vision/diffusers-맛보기/"},"frontmatter":{"title":"Diffusers 맛보기"}}}}}
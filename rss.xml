<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[장띵주 블로그]]></title><description><![CDATA[This is hangjoo's blog.]]></description><link>https://hangjoo.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 06 Mar 2023 15:49:47 GMT</lastBuildDate><item><title><![CDATA[운영체제 구조]]></title><description><![CDATA[이 글은 ‘Abraham Silberschatz, Peter Baer Galvin, Greg Gagne’의 『운영 체제』의 ‘챕터…]]></description><link>https://hangjoo.github.io/OS/운영체제-구조/</link><guid isPermaLink="false">https://hangjoo.github.io/OS/운영체제-구조/</guid><pubDate>Tue, 07 Mar 2023 00:03:13 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;이 글은 ‘Abraham Silberschatz, Peter Baer Galvin, Greg Gagne’의 『운영 체제』의 ‘챕터 2.운영체제 구조’ 부분을 정리한 글입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;들어가며&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0&quot; aria-label=&quot;들어가며 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;들어가며&lt;/h1&gt;
&lt;p&gt;운영체제는 기본적으로 프로그램이 실행될 수 있는 환경을 제공해줍니다. 컴퓨터 시스템 구조 혹은 사용자의 특성에 따라 필요한 프로그램 혹은 환경이 다르기 때문에 이에 맞춰 운영체제 또한 그 구조가 달라집니다. 운영체제 구조를 살펴보기 전, 다음과 같은 관점에 맞춰 운영체제의 구조를 공부하는 것이 이해하는데 도움이 될 수 있습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;운영체제가 제공하는 서비스&lt;/li&gt;
&lt;li&gt;운영체제가 사용자와 프로그래머에게 제공하는 인터페이스&lt;/li&gt;
&lt;li&gt;시스템의 구성요소와 그들의 상호 연결&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;운영체제-서비스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EC%84%9C%EB%B9%84%EC%8A%A4&quot; aria-label=&quot;운영체제 서비스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;운영체제 서비스&lt;/h1&gt;
&lt;p&gt;위에서 이야기한 것처럼, 운영체제는 프로그램이 실행되는 환경을 제공합니다. 운영체제마다 제공하는 서비스는 다르지만 공통적으로 제공하는 종류들이 있습니다. 아래는 공통적으로 주로 사용되는 운영체제의 대표적인 서비스입니다.&lt;/p&gt;
&lt;h3 id=&quot;사용자-인터페이스user-interface&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4user-interface&quot; aria-label=&quot;사용자 인터페이스user interface permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;사용자 인터페이스(user interface)&lt;/h3&gt;
&lt;p&gt;대부분의 운영체제는 여러 형태로 제공되는 사용자 인터페이스(UI)를 제공합니다.&lt;/p&gt;
&lt;p&gt;가장 일반적으로는 &lt;strong&gt;그래픽 사용자 인터페이스(GUI)&lt;/strong&gt;가 있습니다. 그래픽이라는 키워드에서 알 수 있 듯 그래픽 사용자 인터페이스는 사용자와 하드웨어 및 소프트웨어 간의 상호작용을 &lt;strong&gt;시각적인&lt;/strong&gt; 방식으로 제공하는 형태를 의미합니다. 아이콘, 메뉴, 버튼 등과 같이 시각적인 구성 요소를 사용하여 사용자와 컴퓨터 시스템 간의 상호작용을 제공하며, 이러한 구성요소는 마우스, 키보드, 터치스크린 등을 통해 사용자가 조작할 수 있습니다.&lt;/p&gt;
&lt;p&gt;또 다른 인터페이스로는, &lt;strong&gt;명령어 라인 인터페이스(CLI)&lt;/strong&gt;가 있습니다. 이 인터페이스는 GUI와 다르게 &lt;strong&gt;텍스트 기반의 명령어&lt;/strong&gt;를 사용하여 사용자와 컴퓨터 시스템 간의 상호작용을 제공합니다. 사용자가 &lt;strong&gt;명령 프롬프트(prompt)&lt;/strong&gt;에서 명령어를 입력하면, 컴퓨터는 해당 명령어를 해석하여 작업하는 형태로 구성되어 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;프로그램-실행program-execution&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%8B%A4%ED%96%89program-execution&quot; aria-label=&quot;프로그램 실행program execution permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로그램 실행(program execution)&lt;/h3&gt;
&lt;p&gt;운영체제는 프로그램을 메모리에 적재해 실행하는 서비스를 제공합니다. 또 실행하는 것 뿐만 아니라, 프로그램이 정상적으로 혹은 비정상적으로 실행이 끝나고 사용자에게 알릴 수 있어야 합니다.&lt;/p&gt;
&lt;h3 id=&quot;입출력-연산io-operation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%97%B0%EC%82%B0io-operation&quot; aria-label=&quot;입출력 연산io operation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;입출력 연산(I/O operation)&lt;/h3&gt;
&lt;p&gt;어떤 프로그램은 입출력 장치를 필요로 하는 경우가 있을 수 있습니다. 이를 위해 운영체제는 입출력 장치를 사용한 연산을 제공합니다. 또한 보안적인 측면과 효율성을 위해, 사용자에게 입출력 장치에 대한 제어권을 주지 않고 운영체제가 입출력 장치를 관리합니다.&lt;/p&gt;
&lt;h3 id=&quot;파일-시스템-조작file-system-manipulation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%BC-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%A1%B0%EC%9E%91file-system-manipulation&quot; aria-label=&quot;파일 시스템 조작file system manipulation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파일 시스템 조작(file system manipulation)&lt;/h3&gt;
&lt;p&gt;많은 프로그램에서 사용되는 데이터를 저장하거나 읽기 위해, 운영체제는 파일을 읽고 쓰는 서비스를 제공합니다. 명시적으로 파일을 생성할 수 있으며, 원하는 파일을 찾을 수 있고, 파일의 정보를 읽어올 수 있습니다. 또한, 파일 소유권에 기반하여 파일 혹은 디렉토리에 대한 접근을 허가하거나 거부할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;통신communication&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%86%B5%EC%8B%A0communication&quot; aria-label=&quot;통신communication permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;통신(communication)&lt;/h3&gt;
&lt;p&gt;여러 프로세스가 메모리에 적재되어 실행되는 환경에서 프로세스 간의 정보를 교환해야 하는 경우가 있을 수 있습니다. 운영체제는 이러한 상황에서 프로세스 간의 정보를 교환하기 위한 통신 방법을 제공합니다.&lt;/p&gt;
&lt;h3 id=&quot;오류-탐지error-detection&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%A4%EB%A5%98-%ED%83%90%EC%A7%80error-detection&quot; aria-label=&quot;오류 탐지error detection permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;오류 탐지(error detection)&lt;/h3&gt;
&lt;p&gt;운영체제는 발생할 가능성이 있는 모든 오류를 항상 의식하고 있어야 합니다. 또한 일관성 있는 계산을 보장하기 위해 각 오류에 대한 조치를 할 수 있어야 합니다. 운영체제마다 오류에 어떻게 대처하는지는 달라질 수 있어도 대처한다는 점은 동일합니다.&lt;/p&gt;
&lt;h3 id=&quot;자원-할당resource-allocation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EC%9B%90-%ED%95%A0%EB%8B%B9resource-allocation&quot; aria-label=&quot;자원 할당resource allocation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자원 할당(resource allocation)&lt;/h3&gt;
&lt;p&gt;다수의 프로세스나 다수의 작업이 동시에 실행되는 경우 각각에 자원을 할당해주어야 합니다. 운영체제는 이러한 상황에서 어떤 프로세스나 작업에 어떤 자원을 어떻게 효율적으로 할당할 수 있을지 결정합니다. 예를 들어, CPU를 최대한 효율적으로 사용하기 위해 운영체제는 CPU 스케줄링을 사용하여 각 프로세스에 CPU 자원을 할당합니다.&lt;/p&gt;
&lt;h3 id=&quot;로그-작성logging&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A1%9C%EA%B7%B8-%EC%9E%91%EC%84%B1logging&quot; aria-label=&quot;로그 작성logging permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;로그 작성(logging)&lt;/h3&gt;
&lt;p&gt;컴퓨터 서비스를 개선하기 위한 통계 자료 등을 위해 운영체제는 어떤 프로그램이 어떤 종류의 자원을 얼마나 사용하는지를 추적하고 이를 기록합니다.&lt;/p&gt;
&lt;h3 id=&quot;보호와-보안protection-and-security&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B3%B4%ED%98%B8%EC%99%80-%EB%B3%B4%EC%95%88protection-and-security&quot; aria-label=&quot;보호와 보안protection and security permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;보호와 보안(protection and security)&lt;/h3&gt;
&lt;p&gt;여러 사용자가 사용하는 컴퓨터 시스템 혹은 네트워크로 연결된 컴퓨터 시스템에서, 저장된 데이터 혹은 정보의 소유자는 이러한 데이터를 관리하고 통제하길 원합니다. 또 사용자가 아닌 프로세스 작업에서도, 한 프로세스는 다른 프로세스 혹은 운영체제의 작업을 방해해서는 안됩니다. 이와 같이 전반적인 시스템 자원에 대한 접근을 통제하는 것을 &lt;strong&gt;보호(protection)&lt;/strong&gt;이라고 하며, 운영체제는 이러한 보호 기능을 제공합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;보안(security)&lt;/strong&gt;는 네트워크 어댑터 등과 같은 외부 입출력 장치들에 대한 부적절한 접근을 차단하고, 부적절한 접근 탐지를 위해 접속 기록을 남기는 등의 방법을 의미합니다.&lt;/p&gt;
&lt;h1 id=&quot;사용자와-운영체제-인터페이스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%9A%A9%EC%9E%90%EC%99%80-%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot; aria-label=&quot;사용자와 운영체제 인터페이스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;사용자와 운영체제 인터페이스&lt;/h1&gt;
&lt;p&gt;위에서 설명한 것처럼, 운영체제는 사용자가 컴퓨터 시스템과 상호작용을 돕는 여러 인터페이스(GUI, CLI)를 제공하고 있습니다. 이 섹션에서는 이러한 인터페이스에 대해 자세히 다룹니다.&lt;/p&gt;
&lt;h2 id=&quot;명령어-인터페이스command-interface&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4command-interface&quot; aria-label=&quot;명령어 인터페이스command interface permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;명령어 인터페이스(Command Interface)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;명령어 인터페이스는 사용자가 명령어를 입력하면, 명령어를 해석하여 시스템이 해당 명령어를 실행하는 구조로 구성된 인터페이스입니다.&lt;/strong&gt; 위에서 설명한 명령어 라인 인터페이스(CLI)도 명령어 인터페이스 중 하나로 &lt;strong&gt;텍스트 기반&lt;/strong&gt;의 명령어 인터페이스입니다. 일반적으로 명령어 인터페이스를 제공하는 여러 운영체제에서 이러한 명령어를 해석하는 인터프리터를 &lt;strong&gt;쉘(shell)&lt;/strong&gt;이라고 부릅니다.&lt;/p&gt;
&lt;p&gt;명령어 인터프리터의 중요한 기능은 &lt;strong&gt;사용자가 지정한 명령어를 가져와서 수행하는 기능&lt;/strong&gt;입니다. 이러한 기능은 일반적으로 두 가지 방법으로 구현됩니다.&lt;/p&gt;
&lt;p&gt;첫번째 방법은 명령어 &lt;strong&gt;인터프리터 자체가 사용자가 입력한 명령어를 직접 실행하는 코드를 갖도록 구현하는 방법&lt;/strong&gt;입니다. 사용자가 명령어를 입력하면, 명령어 인터프리터는 실행되는 코드에서 해당 명령어를 처리하는 코드로 분기하여, 분기된 코드 내부에서 적절한 시스템 콜을 사용하는 등의 처리를 통해 입력된 명령어를 처리하는 방식으로 동작합니다. 이러한 구현 방법은 명령어 처리를 위한 내부 코드를 포함하고 있기 때문에 처리 속도가 빠르며, 명령어 처리 과정이 노출되지 않기 때문에 보안상의 이점이 있다는 장점이 있습니다. 그러나 모든 명령어에 대한 내부 코드를 구현해야 하므로 구현이 복잡해지며, 명령어 인터프리터의 크기가 커진다는 단점이 있습니다. 또한 새로운 명령어가 추가되거나 기존 명령어가 수정되는 경우 명령어 인터프리터 자체가 변경되어야 한다는 단점도 존재합니다.&lt;/p&gt;
&lt;p&gt;두번째 방법은 &lt;strong&gt;명령어를 처리하는 시스템 프로그램을 구현하여 명령어 인터프리터가 이 프로그램을 실행하도록 구현하는 방법&lt;/strong&gt;입니다. 예를 들어, UNIX에서 파일을 삭제하기 위해 사용되는 &lt;code class=&quot;language-text&quot;&gt;rm&lt;/code&gt; 명령어을 사용자가 입력하면 명령어 인터프리터는 &lt;code class=&quot;language-text&quot;&gt;rm&lt;/code&gt;이라고 불리는 실행 파일을 찾아 그 파일을 메모리에 적재하고 매개변수를 사용하여 파일을 삭제하는 방식으로 동작합니다. 이러한 구현 방법은 해당 명령어 처리를 위한 코드를 명령어 인터프리터에 포함시킬 필요가 없기 때문에 명렁어를 추가하거나 변경하기 쉬우며, 시스템 프로그램을 활용하여 다양한 기능을 제공할 수 있다는 장점이 있습니다. 그러나 시스템 프로그램을 호출하는 과정에서 오버헤드가 발생하여 상대적으로 느리다는 단점과 명령어 처리 과정이 노출되어 보안상의 이슈가 발생할 가능성이 있다는 단점이 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;그래픽-기반-인터페이스graphical-user-interface&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%9E%98%ED%94%BD-%EA%B8%B0%EB%B0%98-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4graphical-user-interface&quot; aria-label=&quot;그래픽 기반 인터페이스graphical user interface permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그래픽 기반 인터페이스(Graphical User Interface)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;그래픽 기반 인터페이스는 시각적인 구성요소를 사용하여 컴퓨터 시스템과의 상호작용을 제공하는 인터페이스입니다.&lt;/strong&gt; 사용자 친화적인 인터페이스로 마우스, 키보드 등의 입력 장치를 사용하여 컴퓨터 시스템과의 상호작용을 제공합니다. 일반적으로 데스크탑 운영체제에서 사용되며 맥, 윈도우, 리눅스 등 대부분의 운영체제에서 GUI를 제공합니다.&lt;/p&gt;
&lt;p&gt;그래픽 기반 인터페이스는 사용자가 쉽게 작업하도록 직관적인 인터페이스를 제공하지만 그래픽 요소를 사용하기 때문에 상대적으로 자원을 많이 소모하며 느리게 동작할 수 있다는 단점이 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;터치스크린-인터페이스touch-screen-interface&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%84%B0%EC%B9%98%EC%8A%A4%ED%81%AC%EB%A6%B0-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4touch-screen-interface&quot; aria-label=&quot;터치스크린 인터페이스touch screen interface permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;터치스크린 인터페이스(Touch-Screen Interface)&lt;/h2&gt;
&lt;p&gt;대부분의 모바일 환경에서 제공하는 인터페이스로, 터치스크린을 사용하여 컴퓨터 시스템과의 상호작용을 제공합니다. 모바일 환경에서는 일반적으로 마우스 및 키보드를 사용하기 어렵기 때문에 터치스크린을 사용한 인터페이스가 발전되었으며, 사용자는 터치스크린에서 손가락을 사용하여 구성요소를 누르거나 스와이프 하는 등의 제스처를 통해 상호작용합니다.&lt;/p&gt;
&lt;h1 id=&quot;시스템-콜system-call&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9Csystem-call&quot; aria-label=&quot;시스템 콜system call permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시스템 콜(System Call)&lt;/h1&gt;
&lt;p&gt;시스템 콜은 프로그램이 하드웨어 자원에 직접 접근하지 않고, 운영체제에게 해당 서비스를 요청하기 위해 운영체제에서 제공하는 인터페이스로, 일반적으로 C와 C++로 구현되어 있습니다. 프로그램이 직접 하드웨어를 제어하는 경우 안정성과 보안에 문제가 발생할 수 있으므로 대신 운영체제가 제공하는 시스템 콜을 사용하여 필요한 기능을 호출하여 사용합니다. 시스템 콜은 보통 라이브러리 함수와 유사한 방식으로 동작합니다. 프로그램은 시스템 콜을 호출하여 운영체제에게 요청을 보내고 운영체제는 해당 요청을 처리한 뒤 결과를 반환합니다.&lt;/p&gt;
&lt;h2 id=&quot;응용-프로그래밍-인터페이스application-programming-interface&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%91%EC%9A%A9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4application-programming-interface&quot; aria-label=&quot;응용 프로그래밍 인터페이스application programming interface permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;응용 프로그래밍 인터페이스(Application Programming Interface)&lt;/h2&gt;
&lt;p&gt;위와 같은 이유로 많은 프로그램에서는 시스템 콜을 통하여 운영체제에 필요한 기능을 호출하여 기능을 구현하고 있습니다. 그러나 일반적으로 개발자나 응용 프로그램은 시스템 콜을 직접 호출하는 것보다 시스템 콜을 추상화한 API를 사용합니다.&lt;/p&gt;
&lt;p&gt;API는 운영체제의 기능을 추상화 했으므로 운영체제가 변경되더라도, API를 사용하여 구현된 프로그램은 영향을 받지 않습니다. 따라서 어느 운영체제를 사용한 컴퓨터 시스템에서도 동일하게 작동할 것을 기대할 수 있습니다. 또 API를 사용하는 경우 시스템 콜을 호출하기 위한 복집한 로직을 구현할 필요 없이 API를 호출하여 해당 기능을 사용할 수 있기 때문에 비용과 복잡성을 줄일 수 있다는 장점이 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;실행-시간-환경rte-runtime-environment&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%ED%96%89-%EC%8B%9C%EA%B0%84-%ED%99%98%EA%B2%BDrte-runtime-environment&quot; aria-label=&quot;실행 시간 환경rte runtime environment permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실행 시간 환경(RTE, Runtime Environment)&lt;/h2&gt;
&lt;p&gt;실행 시간 환경은 운영체제가 제공하는 시스템 콜에 대한 연결고리 역할을 하는 시스템 콜 인터페이스를 제공하는 것을 의미합니다. 시스템 콜은 보통 운영체제 커널 내부에서 실행되는데, 사용자 프로세스가 시스템 콜을 호출하는 경우 상태를 유지하면서 운영체제의 커널로 진입하여 시스템 콜을 진행할 수 있어야 합니다. 이를 위해 운영체제가 제공하는 환경이 실행 시간 환경, RTE 입니다. 실행 시간 환경은 시스템 콜을 호출하는 프로세스의 현재 상태를 저장하고, 시스템 콜이 실행을 마치고 나서 이 상태를 사용하여 프로세스가 정상적으로 다시 실행할 수 있도록 합니다.&lt;/p&gt;
&lt;p&gt;따라서 &lt;strong&gt;시스템 콜을 호출하는 당사자는 시스템 콜이 어떻게 구현되어 있고, 실행 중에 어떤 작업이 수행되는지 알 필요 없이 API에 의해 숨겨지고 RTE에 의해 관리되어, 시스템 콜을 사용하는 사용자는 단순히 API를 준수하고 운영체제가 무엇을 하는지만 이해&lt;/strong&gt;하고 있으면 됩니다.&lt;/p&gt;
&lt;h2 id=&quot;시스템-콜의-유형&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%BD%9C%EC%9D%98-%EC%9C%A0%ED%98%95&quot; aria-label=&quot;시스템 콜의 유형 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시스템 콜의 유형&lt;/h2&gt;
&lt;p&gt;시스템 콜은 크게 5가지의 유형으로 구분될 수 있습니다. 아래는 5가지에 대한 시스템 콜의 유형에 대한 설명을 다룹니다.&lt;/p&gt;
&lt;h3 id=&quot;프로세스-제어process-control&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%A0%9C%EC%96%B4process-control&quot; aria-label=&quot;프로세스 제어process control permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스 제어(Process Control)&lt;/h3&gt;
&lt;p&gt;시스템 콜을 사용하여 실행 중인 프로그램(프로세스)를 정상적(end)으로 혹은 비정상적(abort)으로 종료시킬 수 있습니다. 만약 프로세스가 비정상적으로 종료해야 하기 위해 시스템 콜을 호출하는 경우, 메모리 덤프가 실행되며 오류 메세지를 표시할 수 있습니다.&lt;/p&gt;
&lt;p&gt;또한, 한 프로세스가 다른 프로그램을 메모리에 적재하고 실행시킬 수도 있습니다. 이 때 새로 실행된 프로그램이 종료되어 기존 프로그램으로 돌아가기 위해 기존 프로그램의 메모리 이미지를 보관해야 합니다. 이러한 목적을 위해 시스템 콜(create_process)을 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;새로운 프로세스 생성 및 종료 외에도 시스템 콜을 사용하여 실행 중인 프로세스를 제어할 수 있습니다. 프로세스의 우선 순위와 최대 허용 시간 및 프로세스의 속성들을 가져오고(get&lt;em&gt;process&lt;/em&gt;attributes) 재설정(set&lt;em&gt;process&lt;/em&gt;attributes)하는 등의 행동도 시스템 콜을 통해 동작할 수 있습니다.&lt;/p&gt;
&lt;p&gt;여러 개의 프로세스가 실행되는 환경에서 프로세스 간의 데이터 공유가 발생할 수도 있는데, 공유되는 데이터의 일관성을 위해 운영체제는 종종 해당 공유 데이터를 잠그기 위한 시스템 콜(lock)도 제공합니다.&lt;/p&gt;
&lt;h3 id=&quot;파일-조작file-manipulation&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%BC-%EC%A1%B0%EC%9E%91file-manipulation&quot; aria-label=&quot;파일 조작file manipulation permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파일 조작(File Manipulation)&lt;/h3&gt;
&lt;p&gt;파일도 운영체제에서 제공하는 시스템 콜을 통해 다룰 수 있습니다. 먼저 파일을 생성(create)하고 삭제(delete)할 수 있습니다. 생성된 파일은 파일 이름을 통해 열고(open), 파일 내용을 읽거나(read) 쓰는(write) 행위도 가능합니다. 해당 파일의 조작이 끝난 경우 파일을 닫아(close) 해당 파일의 조작을 끝냅니다.&lt;/p&gt;
&lt;p&gt;파일을 생성하거나 읽고 쓰는 행위 외에도, 파일의 정보를 가져올 수 있습니다. 파일의 속성을 가져오거나(get&lt;em&gt;file&lt;/em&gt;attribute) 설정(set&lt;em&gt;file&lt;/em&gt;attribute)할 수 있으며, 파일의 위치를 이동(move)하거나 복사(copy)할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;장치-관리device-management&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EC%B9%98-%EA%B4%80%EB%A6%ACdevice-management&quot; aria-label=&quot;장치 관리device management permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장치 관리(Device Management)&lt;/h3&gt;
&lt;p&gt;프로세스가 실행되는 중에 다른 컴퓨터 자원을 필요로 하는 경우가 있을 수 있습니다. 이 때 필요한 컴퓨터 자원에는 메모리에 저장된 데이터 외에도 외부 입출력 장치에서 필요로 자원이 있을 수 있습니다. 이러한 자원을 얻기 위해서 입출력 장치를 사용하게 되는데, 입출력 장치에 대한 접근을 시스템 콜을 통해 작업할 수 있습니다.&lt;/p&gt;
&lt;p&gt;입출력 장치에 접근하는 사용자가 여러 명일 수 있으므로 운영체제는 입출력 장치를 사용하기 위해 먼저 해당 장치에 대한 요청(request)를 필요로 합니다. 요청을 통해 해당 입출력 장치에 대한 접근 권한을 얻고 사용이 끝나면 해당 장치를 해제(release)해야 합니다. 입출력 장치에 대한 시스템 콜 기능은 파일 조작에서의 시스템 콜 사용과 비슷하게 사용됩니다.&lt;/p&gt;
&lt;h3 id=&quot;정보-유지information-maintenance&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EB%B3%B4-%EC%9C%A0%EC%A7%80information-maintenance&quot; aria-label=&quot;정보 유지information maintenance permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정보 유지(Information Maintenance)&lt;/h3&gt;
&lt;p&gt;시스템 콜에는 프로세스나 자원 등을 관리하기 위한 기능 외에도 특정 정보를 얻기 위해 사용되는 시스템 콜이 있습니다. 예를 들면, 현재 시간(time)과 현재 날짜(date)를 반환하는 시스템 콜이 있습니다. 이 외에도 운영체제의 버전 번호, 메모리 및 디스크 공간의 정보를 알려주는 시스템 콜 등이 있습니다.&lt;/p&gt;
&lt;p&gt;시스템 정보 외에도, 메모리를 덤프(dump)하는 시스템 콜을 통해 디버깅을 유용하게 할 수 있으며, 프로그램의 시간 프로파일(time profile)을 통해 여러 프로그램의 통계를 얻을 수 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;통신communication-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%86%B5%EC%8B%A0communication-1&quot; aria-label=&quot;통신communication 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;통신(Communication)&lt;/h3&gt;
&lt;p&gt;기본적으로 통신 방법에는 크게 &lt;strong&gt;메세지 전달&lt;/strong&gt;과 &lt;strong&gt;공유 메모리&lt;/strong&gt;가 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;메세지 전달&lt;/strong&gt; 방법은 통신하는 두 프로세스가 정보를 교환하기 위해 메세지를 주고 받는 방법으로, 두 프로세스가 직접 메세지를 주고 받거나, 버퍼와 메세지 큐를 통해 간접적으로 주고 받을 수 있습니다.&lt;/p&gt;
&lt;p&gt;직접 메세지를 주고 받는 방법은 &lt;strong&gt;직접 통신 방법(Direct Communication)&lt;/strong&gt;으로, 송신자가 명시적으로 수신자를 지정하여 메세지를 전송합니다. 이 때 수신자는 송신자의 식별자(프로세스 이름)(get&lt;em&gt;hostid, get&lt;/em&gt;processid)을 알고 있어야 하며, 송신자와 동시에 수신자와 연결됩니다.&lt;/p&gt;
&lt;p&gt;버퍼와 메세지 큐를 사용하는 방법은 &lt;strong&gt;간접 통신 방법(Indirect Communication)&lt;/strong&gt;으로, 송신자와 수신자가 직접 통신하지 않고, 커널이나 운영체제의 중계를 통해 통신하는 방법입니다. 커널은 메세지를 버퍼에 저장하고, 메세지 큐를 통해 송신자와 수신자를 연결합니다. 따라서 송신자와 수신자는 서로를 모르며, 커널이 중간에서 관리하는 형태입니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;공유 메모리&lt;/strong&gt; 방법은 프로세스들이 동일한 메모리 영역을 공유하며 통신하는 방법입니다. 일반적으로 각 프로세스는 독립적으로 실행되기 때문에 메모리 공간을 공유하지 않지만, 공유 메모리 방법을 사용하면 공유 메모리 영역을 프로세스의 메모리 공간처럼 사용하여 여러 프로세스 간의 데이터를 공유하는 방식으로 사용할 수 있습니다. 먼저 공유 메모리 세그먼트를 생성(shared&lt;em&gt;memory&lt;/em&gt;create)하고, 생성된 공유 메모리 세그먼트에 프로세스의 가상 주소 공간에 연결(shared&lt;em&gt;memory&lt;/em&gt;attach)하여 공유 메모리 공간에 접근할 수 있습니다.&lt;/p&gt;
&lt;p&gt;일반적으로 메세지 전달 방법은 소량의 데이터를 주고 받을 때 유용합니다. 공유 메모리 방법과 다르게 충돌이 발생하지 않기 때문입니다. 또 공유 메모리 방법보다 구현하기 쉽다는 장점이 있습니다. 반대로 공유 메모리 방법은 한 컴퓨터 내에서 메모리를 사용하여 데이터를 공유하기 때문에 메모리 전송하는 것과 동일한 속도로 데이터를 공유할 수 있다는 장점이 있습니다. 그러나 데이터 보호와 동기화 부분에서 문제가 발생할 가능성이 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;보호protection&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B3%B4%ED%98%B8protection&quot; aria-label=&quot;보호protection permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;보호(Protection)&lt;/h3&gt;
&lt;p&gt;보호는 컴퓨터 시스템이 제공하는 자원에 대한 접근을 제어하기 위한 방법입니다. 이전에는 다중의 사용자를 갖는 다중 프로그램 시스템에서만 고려되는 문제였으나, 현대에는 네트워킹과 인터넷의 발전으로 서버에서 휴대용 컴퓨터까지 전반적인 모든 컴퓨터 시스템에서 고려해야 하는 사항이 되었습니다.&lt;/p&gt;
&lt;p&gt;보호에 주로 사용되는 시스템 콜은 파일 같은 시스템 자원의 허가 권한을 설정하는데 사용되는 시스템 콜(set&lt;em&gt;permission)과 권한 정보를 가져오는 시스템 콜(get&lt;/em&gt;permission)이 주로 사용됩니다.&lt;/p&gt;
&lt;h1 id=&quot;시스템-서비스system-service&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%9C%EB%B9%84%EC%8A%A4system-service&quot; aria-label=&quot;시스템 서비스system service permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시스템 서비스(System Service)&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;시스템 유틸리티(system utility)로도 알려진 시스템 서비스는 프로그램 개발과 실행을 위해 다양한 기능을 제공합니다.&lt;/strong&gt; 주로 프로그램이 직접 실행할 수 없는 하드웨어 관리, 파일 및 디렉토리 관리, 프로세스 관리, 메모리 관리 등의 특정한 작업을 수행합니다. 일반적으로 시스템 서비스는 두 가지 방식으로 제공됩니다. 하나는 커널 내부에 구현된 서비스로서 제공되며, 다른 하나는 라이브러리의 형태로 제공되는 시스템 서비스입니다.&lt;/p&gt;
&lt;p&gt;시스템 서비스가 주로 제공하는 기능은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파일 관리&lt;/li&gt;
&lt;li&gt;상태 정보&lt;/li&gt;
&lt;li&gt;파일 변경&lt;/li&gt;
&lt;li&gt;프로그래밍 언어 지원&lt;/li&gt;
&lt;li&gt;프로그램 적재와 수행&lt;/li&gt;
&lt;li&gt;통신&lt;/li&gt;
&lt;li&gt;백그라운드 서비스&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;링커와-로더linker-and-loader&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A7%81%EC%BB%A4%EC%99%80-%EB%A1%9C%EB%8D%94linker-and-loader&quot; aria-label=&quot;링커와 로더linker and loader permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;링커와 로더(Linker and Loader)&lt;/h1&gt;
&lt;p&gt;일반적으로 프로그램은 디스크에 &lt;strong&gt;이진 실행 파일(binary executable file)&lt;/strong&gt;로 존재합니다. 이 프로그램을 CPU가 실행하기 위해서는 프로그램을 메모리로 가져와 프로세스 형태로 배치되는 과정이 필요합니다. 이 섹션에서는 프로그램을 컴파일하고 메모리에 적재하여 CPU 코어에서 실행하기까지의 과정을 다룹니다.&lt;/p&gt;
&lt;p&gt;먼저 프로그램은 소스 파일에서 오브젝트 파일로 컴파일 됩니다. 이렇게 컴파일 된 오브젝트 파일을 &lt;strong&gt;재배치 가능 오브젝트 파일&lt;/strong&gt;이라고 부릅니다. 이렇게 생성된 오브젝트 파일들을 &lt;strong&gt;링커&lt;/strong&gt;가 &lt;strong&gt;하나의 이진 실행 파일로 결합&lt;/strong&gt;합니다. 이러한 작업을 &lt;strong&gt;링킹(linking)&lt;/strong&gt;이라고 부르며, 이 단계에서 표준 C 라이브러리와 같이 다른 오브젝트 파일이나 라이브러리가 포함될 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;로더&lt;/strong&gt;는 이렇게 생성된 이진 실행 파일을 메모리에 적재하는데 사용됩니다. 적재된 이진 실행 파일은 CPU 코어에서 실행할 수 있는 상태가 됩니다. 링커와 로더가 주로 하는 작업은 &lt;strong&gt;재배치&lt;/strong&gt;와 관련된 작업으로, 작성된 프로그램에 최종으로 실행될 주소를 부여하고, 프로그램의 코드와 데이터가 해당 주소에 일치하도록 설정하여 프로그램이 실행될 때 코드가 라이브러리를 호출하고 변수에 접근할 수 있도록 합니다.&lt;/p&gt;
&lt;p&gt;앞서 설명한 과정은 라이브러리가 오브젝트 파일을 생성할 때 링크되는 것을 기준으로 설명했으나, 프로그램이 메모리에 적재되는 순간에 라이브러리가 링크되도록 할 수도 있습니다. 실제로 대부분의 시스템에서는 동적으로 라이브러리를 링크하도록 구성되어 있으며, 이러한 동적 링크 방식은 실제 파일 실행 시에 사용되지 않을 수 있는 라이브러리를 링크하고 나서 로드는 하지 않아도 된다는 점입니다. 이로 인해 이 프로그램을 실행하는 여러 프로세스가 동적으로 링크된 라이브러리를 공유할 수 있어 메모리 사용이 크게 절약할 수 있다는 장점이 있습니다. 이러한 동적 링크 방식은 컴파일 시에 라이브러리 대신 재배치 정보를 삽입하고, 라이브러리의 함수를 호출 할 때 라이브러리 코드가 재배치 정보를 사용하여 메모리에 로드되는 형태로 작동합니다.&lt;/p&gt;
&lt;p&gt;컴파일 된 오브젝트 파일 및 실행 파일은 일반적으로 표준화된 형식을 가지고 있습니다. 예를 들어 UNIX 및 Linux 시스템의 경우 ELF(Executable and Linkable Format)이라는 표준 파일 형식을 사용하고 있습니다. 이렇게 표준화된 형식을 사용하면 운영체제나 아키텍처에 상관없이 동일한 파일 형식으로 프로그램을 작성하고 배포할 수 있다는 장점이 있습니다. 이러한 장점은 소프트웨어 개발과 배포의 비용 절감으로 이어집니다. 또 표준화된 파일 형식을 사용하면 공통적인 보안 기능을 포함하여 악성 코드 등과 같은 문제로부터 보호할 수 있는 보안성을 얻을 수 있습니다.&lt;/p&gt;
&lt;h1 id=&quot;운영체제-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;운영체제 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;운영체제 구조&lt;/h1&gt;
&lt;p&gt;현대의 운영체제는 크고 복잡하기 때문에 적절하게 동작하고 쉽게 변경되려면 신중하게 구조가 잡혀야 합니다. 이 섹션에서는 운영체제의 구조의 종류에 대해서 다룹니다.&lt;/p&gt;
&lt;h2 id=&quot;모놀리식-구조monolithic-structure&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%86%80%EB%A6%AC%EC%8B%9D-%EA%B5%AC%EC%A1%B0monolithic-structure&quot; aria-label=&quot;모놀리식 구조monolithic structure permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모놀리식 구조(Monolithic Structure)&lt;/h2&gt;
&lt;p&gt;운영체제를 구성하는 가장 간단한 구조로, 커널의 모든 기능을 단일 실행 파일에 넣는 구조입니다. 최초의 UNIX 운영체제가 이러한 모놀리식 구조로 구현되었으며, 단일 커널과 시스템 프로그램으로 구성되었습니다. 이러한 모놀리식 구조는 &lt;strong&gt;단순한 구조를 가지고 있어 확장하기 어렵다는 단점&lt;/strong&gt;이 있습니다. 그러나 &lt;strong&gt;시스템 콜 인터페이스에서 오버헤드가 거의 없고 커널 내에서 통신 속도가 빠르다는 장점&lt;/strong&gt;이 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;계층형-구조hierarchical-structure&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B3%84%EC%B8%B5%ED%98%95-%EA%B5%AC%EC%A1%B0hierarchical-structure&quot; aria-label=&quot;계층형 구조hierarchical structure permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;계층형 구조(Hierarchical Structure)&lt;/h2&gt;
&lt;p&gt;모놀리식 구조와 같은 단일 구조는 운영체제의 한 부분을 변경하면 다른 부분에 영향을 줄 수 있습니다. 이 대신, 운영체제를 개별적으로 독립된 작은 구성요소로 나눈 뒤, 이 구성요소를 합쳐서 커널을 구성하는 방법이 있습니다. 이러한 구조의 장점은 한 구성 요소에 변경이 있으면, 해당 구성 요소 내에서만 영향이 존재하며 다른 구성 요소에는 영향이 없습니다. 따라서 운영체제의 내부 작동을 더 자유롭게 변경할 수 있다는 장점이 있습니다.&lt;/p&gt;
&lt;p&gt;이러한 구조 중 대표적인 구조가 &lt;strong&gt;계층형 구조&lt;/strong&gt;입니다. 계층형 구조에서는 운영체제가 여러 계층으로 구분되어, 최하위 층은 하드웨어, 최상위 층은 사용자 인터페이스로 구성되어 있습니다. 하나의 계층에서는 아래 계층의 루틴을 호출하여 하나의 루틴을 이루는 형태로 구성되어 있습니다. 이러한 계층형 구조의 대표적인 장점은 &lt;strong&gt;구현과 디버깅이 간단하다는 점&lt;/strong&gt;입니다. 각 계층은 하위층들의 서비스와 기능들만을 사용해서 구현되기 때문에, &lt;strong&gt;최하위 층에서부터 시작하여 특정 층에서 오류나 문제가 발생하는 경우, 하위층은 이미 검증되었기 때문에 해당 층에서 반드시 오류나 문제가 있음을 보장&lt;/strong&gt;할 수 있습니다. 또한 한 계층은 하위층의 서비스와 기능들을 사용하여 구현되기 때문에 &lt;strong&gt;내부적으로 어떻게 구현되어 있는지 알 필요 없이 해당 서비스와 기능이 어떻게 작동하는지만 알고 있으면 된다는 장점&lt;/strong&gt;이 있습니다. 그러나 &lt;strong&gt;이러한 구조는 하나의 완성된 서비스를 위해 여러 계층을 통과해야 하기 때문에 상당한 오버헤드가 있다는 단점&lt;/strong&gt;이 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;마이크로-커널micro-kernel&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C-%EC%BB%A4%EB%84%90micro-kernel&quot; aria-label=&quot;마이크로 커널micro kernel permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마이크로 커널(Micro-Kernel)&lt;/h2&gt;
&lt;p&gt;마이크로 커널 구조는 커널에 중요한 구성요소만 남겨두고, 나머지 필요한 서비스와 구성요소는 별도 프로그램으로 구현하여 운영체제를 구성하는 방법입니다. 마이크로 커널 방식의 장점은 운영체제의 확장이 매우 쉽다는 점입니다. &lt;strong&gt;새로운 서비스를 추가하는 경우 해당 서비스를 별도의 프로그램으로 작성하여 추가만 하면 되므로 커널을 변경할 필요가 없습니다.&lt;/strong&gt; 또 &lt;strong&gt;서비스 대부분이 커널이 아니라 사용자 프로세스로 작동하므로 높은 보안성과 신뢰성을 제공&lt;/strong&gt;합니다. 만약 한 서비스에서 문제가 발생하더라도 운영체제의 다른 부분에는 영향을 받지 않습니다. 그러나 마이크로 커널은 &lt;strong&gt;별도의 프로그램으로 실행되는 특징으로 인하여 발생하는 오버헤드로 성능이 나쁘다는 단점&lt;/strong&gt;이 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;모듈module&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%93%88module&quot; aria-label=&quot;모듈module permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모듈(Module)&lt;/h2&gt;
&lt;p&gt;운영체제를 구성하는 구조 중 다른 하나는 &lt;strong&gt;모듈&lt;/strong&gt;을 사용하는 방식입니다. &lt;strong&gt;로드 가능한 커널 모듈(Loadable Kernel Modules, LKM)&lt;/strong&gt; 방식이라고 부르는 이 방식은 &lt;strong&gt;런타임 시에 부가적인 서비스들을 모듈 형태로 링크&lt;/strong&gt;하여 사용하는 방식을 의미합니다.&lt;/p&gt;
&lt;p&gt;이 구조의 핵심은 핵심 서비스들은 커널을 통해 제공하고, 부가적인 서비스들은 커널이 실행되는 동안 동적으로 모듈을 통해 제공하는 것입니다. 모듈 구조는 운영체제의 유지보수가 편리하고 확장성이 높다는 장점이 있습니다. 운영체제에 새로운 기능이 추가되는 경우 해당 기능을 사용하는 모듈을 추가하거나, 수정하는 경우 수정된 모듈만 교체하는 식으로 구성할 수 있습니다.&lt;/p&gt;
&lt;p&gt;또한 모듈들은 인터페이스를 가지기 때문에 하나의 모듈에서 또 다른 모듈을 불러와 사용할 수 있다는 점에서 계층형 구조보다 유연한 구조를 가지고 있습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[운영체제 개요]]></title><description><![CDATA[이 글은 ‘Abraham Silberschatz, Peter Baer Galvin, Greg Gagne’의 『운영 체제』의 ‘챕터 1.서론’ 부분을 정리한 글입니다. 운영체제란 운영체제(Operating System…]]></description><link>https://hangjoo.github.io/OS/운영체제-개요/</link><guid isPermaLink="false">https://hangjoo.github.io/OS/운영체제-개요/</guid><pubDate>Sun, 26 Feb 2023 03:02:55 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;이 글은 ‘Abraham Silberschatz, Peter Baer Galvin, Greg Gagne’의 『운영 체제』의 ‘챕터 1.서론’ 부분을 정리한 글입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;운영체제란&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EB%9E%80&quot; aria-label=&quot;운영체제란 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;운영체제란&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;운영체제(Operating System)&lt;/strong&gt;는 컴퓨터 하드웨어를 관리하는 소프트웨어입니다. 응용 프로그램이 실행되기 위한 기반을 제공하며 &lt;strong&gt;컴퓨터 하드웨어와 사용자 사이에 위치하여 중재자 역할&lt;/strong&gt;을 수행합니다.&lt;/p&gt;
&lt;h2 id=&quot;운영체제의-역할&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EC%97%AD%ED%95%A0&quot; aria-label=&quot;운영체제의 역할 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;운영체제의 역할&lt;/h2&gt;
&lt;p&gt;컴퓨터 시스템은 크게 네 가지 구성요소인 &lt;strong&gt;하드웨어, 운영체제, 응용 프로그램, 사용자&lt;/strong&gt;로 구분할 수 있습니다. &lt;strong&gt;하드웨어&lt;/strong&gt;는 &lt;strong&gt;중앙 처리 장치(CPU), 메모리, 입출력(I/O) 장치&lt;/strong&gt;로 구성되어 계산을 위한 자원을 제공합니다. &lt;strong&gt;응용 프로그램&lt;/strong&gt;은 사용자가 해결하고자 하는 문제를 위해 &lt;strong&gt;컴퓨터의 자원을 어떻게 사용 할 지 정의&lt;/strong&gt;합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;운영체제&lt;/strong&gt;는 다양한 응용 프로그램 간의 하드웨어 사용을 제어하고 조정합니다. 또 컴퓨터 시스템이 하드웨어, 소프트웨어 및 데이터로 구성되어 있다고 생각할 때 운영체제는 이 자원을 적절하게 사용할 수 있는 방법을 제공한다고 생각할 수 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;사용자-관점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%9A%A9%EC%9E%90-%EA%B4%80%EC%A0%90&quot; aria-label=&quot;사용자 관점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;사용자 관점&lt;/h3&gt;
&lt;p&gt;사용자의 관점에서 운영체제의 역할은 인터페이스에 따라 달라집니다. 많은 사용자들은 모니터, 키보드, 마우스로 구성된 PC 앞에서 작업합니다. 이 때 컴퓨터 시스템은 사용자가 자원을 독점하여 수행하고자 하는 작업을 최대화할 수 있도록 하는 것이며 이러한 관점에서 &lt;strong&gt;운영체제는 사용의 용이성을 위해 설계&lt;/strong&gt;되었다고 볼 수 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;시스템-관점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B4%80%EC%A0%90&quot; aria-label=&quot;시스템 관점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시스템 관점&lt;/h3&gt;
&lt;p&gt;시스템 관점에서 운영체제의 역할은 &lt;strong&gt;하드웨어와 가장 밀접하게 연관된 프로그램&lt;/strong&gt;입니다. 따라서 운영체제를 &lt;strong&gt;자원 할당자(Resource Allocator)&lt;/strong&gt;로 볼 수 있습니다. 문제를 해결하기 위해 요구되는 시스템 자원들(CPU, 메모리 공간, 저장장치 공간, 입출력 장치)들을 관리하는 관리자 역할을 운영체제가 수행합니다. 여러 프로그램에서 같은 자원에 대하 요청이 존재할 수 있으므로 운영체제는 효율적으로 어떤 자원 요청에 자원을 어떻게 할당할지 결정합니다.&lt;/p&gt;
&lt;h3 id=&quot;제어-관점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%9C%EC%96%B4-%EA%B4%80%EC%A0%90&quot; aria-label=&quot;제어 관점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;제어 관점&lt;/h3&gt;
&lt;p&gt;컴퓨터 시스템에는 여러 가지 입출력 장치와 사용자 프로그램이 존재합니다. 이러한 장치와 프로그램들이 올바르게 동작할 수 있도록 운영체제는 각 장치와 프로그램을 제어하는 제어 프로그램(Controll Program)의 역할을 수행합니다. 특히 운영체제는 입출력 장치의 제어와 작동에 깊이 관여하는 특성이 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;운영체제의-정의&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EC%A0%95%EC%9D%98&quot; aria-label=&quot;운영체제의 정의 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;운영체제의 정의&lt;/h2&gt;
&lt;p&gt;일반적으로 운영체제에 대한 적합한 정의는 따로 존재하지 않으나, 효율적이고 유용한 컴퓨팅 시스템을 만들기 위한 문제를 해결하는 합리적인 방법으로 볼 수 있습니다. 사용자의 문제를 해결하기 위해 컴퓨터 하드웨어가 사용되나 오직 하드웨어만으로는 사용하기 어렵기 때문에 응용 프로그램을 작성하여 하드웨어를 제어합니다. 이러한 응용 프로그램에는 입출력 장치 제어와 같이 &lt;strong&gt;대부분의 프로그램에서 공통적으로 사용되는 작업이 필요&lt;/strong&gt;하고, 이러한 작업을 위해 &lt;strong&gt;자원을 제어하고 할당하는 일반적인 기능을 운영체제라는 소프트웨어를 통해 제공&lt;/strong&gt;하는 것입니다.&lt;/p&gt;
&lt;p&gt;운영체제에 보편적으로 존재하는 요소(Component)는 컴퓨터에서 항상 실행되는 &lt;strong&gt;커널(Kernel)&lt;/strong&gt;과 쉽게 응용 프로그램을 개발할 수 있게 하는 &lt;strong&gt;미들웨어 프레임워크&lt;/strong&gt; 및 시스템 실행 중 시스템을 관리하는 데 도움이 되는 &lt;strong&gt;시스템 프로그램&lt;/strong&gt;이 포함됩니다.&lt;/p&gt;
&lt;h1 id=&quot;컴퓨터-시스템의-구성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9D%98-%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;컴퓨터 시스템의 구성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴퓨터 시스템의 구성&lt;/h1&gt;
&lt;p&gt;일반적인 현대 컴퓨터 시스템은 하나 이상의 &lt;strong&gt;중앙 처리 장치(CPU)&lt;/strong&gt;와 &lt;strong&gt;버스&lt;/strong&gt;로 연결된 &lt;strong&gt;여러 장치 컨트롤러&lt;/strong&gt;로 구성됩니다. 각 장치 컨트롤러는 특정 유형의 장치를 담당합니다. 일반적으로 운영체제에는 각 장치 컨트롤러마다 &lt;strong&gt;장치 드라이버&lt;/strong&gt;가 존재하여 장치 컨트롤러의 동작과 장치에 대한 &lt;strong&gt;인터페이스&lt;/strong&gt;를 제공합니다.&lt;/p&gt;
&lt;h2 id=&quot;인터럽트interrupts&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8interrupts&quot; aria-label=&quot;인터럽트interrupts permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인터럽트(Interrupts)&lt;/h2&gt;
&lt;p&gt;일반적인 컴퓨터 작업은 다음과 같은 과정을 거칩니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;입출력 작업을 시작하기 위해 장치 드라이버는 장치 컨트롤러의 적절한 레지스터에 값을 적재합니다.&lt;/li&gt;
&lt;li&gt;장치 컨트롤러는 이러한 레지스터의 내용을 검사하여 수행할 작업을 결정합니다.&lt;/li&gt;
&lt;li&gt;컨트롤러는 장치에서 로컬 버퍼로 데이터 전송을 시작합니다.&lt;/li&gt;
&lt;li&gt;장치 컨트롤러는 장치 드라이버에게 작업이 완료되었음을 알립니다.&lt;/li&gt;
&lt;li&gt;작업이 읽기 요청인 경우 데이터 또는 데이터에 대한 포인터를 반환하고, 쓰기 요청인 경우 운영체제의 다른 부분에 제어를 넘깁니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위 과정이 끝나면 컨트롤러는 장치 드라이버에게 작업을 완료했다는 사실을 알리게 되는데, 이 때 사용되는 것이 &lt;strong&gt;인터럽트(interrupts)&lt;/strong&gt;입니다. 이와 같이 하드웨어에서 발생한 인터럽트를 &lt;strong&gt;하드웨어 인터럽트(hardware interrupt)&lt;/strong&gt;라고 하며, 컴퓨터 하드웨어는 언제든 시스템 버스를 통해 CPU에 신호를 보내 인터럽트를 발생시킬 수 있습니다.&lt;/p&gt;
&lt;p&gt;반면 프로그램에서도 인터럽트로 발생시킬 수 있는데, 이 때 발생하는 인터럽트를 &lt;strong&gt;소프트웨어 인터럽트(software interrupt)&lt;/strong&gt;라고 합니다. 주로 예외 상황이나 오류 처리 등에 사용되며, 대표적인 소프트웨어 인터럽트로는 &lt;strong&gt;시스템 콜(system call)&lt;/strong&gt;과 &lt;strong&gt;프로세스 간 통신(IPC, Interprocess Communication)&lt;/strong&gt;이 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;인터럽트-처리-과정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8-%EC%B2%98%EB%A6%AC-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;인터럽트 처리 과정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인터럽트 처리 과정&lt;/h3&gt;
&lt;p&gt;인터럽트가 발생하면 CPU는 그 즉시 하던 작업을 중단하고, &lt;strong&gt;해당 인터럽트를 처리하는 인터럽트 서비스 루틴(인터럽트 처리 루틴)&lt;/strong&gt;이 호출되어 해당 인터럽트를 처리하게 됩니다. 인터럽트 서비스 루틴은 &lt;strong&gt;인터럽트 핸들러(interrupt handler)&lt;/strong&gt;에 의해 관리되며, 여러 인터럽트 서비스 루틴을 등록하고, 인터럽트가 발생하면 적절한 인터럽트 서비스 루틴을 실행합니다. 인터럽트는 매우 빈번하게 발생하기 때문에 빠르게 처리되어야 하고, 이를 위해 &lt;strong&gt;운영체제에서는 인터럽트 서비스 루틴에 대한 포인터들의 테이블을 사용&lt;/strong&gt;합니다. 이 포인터 테이블은 보통 하위 메모리에 저장되며, &lt;strong&gt;인터럽트가 요청되면 인터럽트의 정보를 조회하여 인터럽트 번호를 얻고, 인터럽트 테이블의 해당 인덱스에 위치한 인터럽트 벡터를 조회&lt;/strong&gt;합니다. 해당 인터럽트 벡터에는 &lt;strong&gt;발생한 인터럽트에 대한 인터럽트 서비스 루틴의 시작 주소가 저장&lt;/strong&gt;되어 있어 해당 주소를 이용하여 인터럽트를 처리합니다.&lt;/p&gt;
&lt;p&gt;인터럽트가 처리되고 나면 원래 실행 중이던 연산 작업으로 돌아가야 하므로 &lt;strong&gt;CPU는 인터럽트가 발생하면 현재 실행 중인 작업의 상태를 저장(컨텍스트 스위칭, Context Switching)합니다. 인터럽트가 처리되면 실행하던 연산 주소를 다시 프로그램 카운터(PC)에 적재한 뒤 원래 작업을 다시 실행합니다.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;인터럽트-요청-라인irq&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8-%EC%9A%94%EC%B2%AD-%EB%9D%BC%EC%9D%B8irq&quot; aria-label=&quot;인터럽트 요청 라인irq permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인터럽트 요청 라인(IRQ)&lt;/h3&gt;
&lt;p&gt;CPU 하드웨어에는 &lt;strong&gt;IRQ라고도 부르는 인터럽트 요청 라인(interrupt request line)이 존재&lt;/strong&gt;합니다. &lt;strong&gt;CPU가 하나의 명령어를 처리할 때마다 IRQ를 검사하여 인터럽트가 발생했는지 검사&lt;/strong&gt;합니다. 만약 어떤 컨트롤러가 IRQ에 신호를 보낸 것이 감지되면, 위에서 설명한 것처럼 인터럽트를 번호를 읽고 이 번호를 사용해 인터럽트 벡터를 가져와 인터럽트 핸들러 루틴(interrupt-handler routine)으로 이동하여 인터럽트를 처리합니다. 이 과정을 간단하게 정리하면 아래와 같습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;raise : 장치 컨트롤러가 IRQ에 신호를 보내 인터럽트를 발생시킵니다.&lt;/li&gt;
&lt;li&gt;catch : CPU가 하나의 명령어를 실행하고 나서 IRQ를 검사합니다.&lt;/li&gt;
&lt;li&gt;dispatch : 인터럽트 번호를 사용해 인터럽트 핸들러로 디스패치합니다.&lt;/li&gt;
&lt;li&gt;clear : 인터럽트를 처리한 뒤 해당 인터럽트를 삭제합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;마스크-인터럽트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EC%8A%A4%ED%81%AC-%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8&quot; aria-label=&quot;마스크 인터럽트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마스크 인터럽트&lt;/h3&gt;
&lt;p&gt;대부분의 CPU에는 2개의 IRQ가 존재하는데, 하나는 복구가 불가능한 메모리 오류와 같은 이벤트를 위해 예약된 &lt;strong&gt;마스크 불가능 인터럽트(nonmaskable interrupt)&lt;/strong&gt;이며 다른 하나는 &lt;strong&gt;마스크 가능 인터럽트(maskable interrupt)&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;마스크 불가능 인터럽트(NMI, nonmaskable interrupt)&lt;/strong&gt;는 무시할 수 없는 인터럽트로, CPU는 마스크 불가능 인터럽트가 발생하면 반드시 처리를 해야합니다. 하드웨어 장애나 소프트웨어 오류로 인한 비정상적인 상황에서 발생하며, 보통 하드웨어 인터럽트와는 달리 별도의 전기 신호를 사용하여 처리됩니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;마스크 가능 인터럽트(MI, maskable interrupt)&lt;/strong&gt;는 무시가 가능한 인터럽트로, 마스킹 여부를 이용해 소프트웨어에서 해당 인터럽트를 무시할 수 있습니다. 이를 이용하여 인터럽트를 처리할 때 우선순위를 지정할 수 있습니다. 일반적으로 발생하는 소프트웨어 인터럽트가 마스크 가능 인터럽트에 해당합니다.&lt;/p&gt;
&lt;p&gt;CPU는 여러 인터럽트를 빠르게 처리해야 하므로, 인터럽트의 우선순위를 관리하여 처리할 순서를 결정합니다. 이 때, 마스크 불가능 인터럽트는 최우선으로 처리되며, 그리고 하드웨어 인터럽트, 소프트웨어 인터럽트 순으로 처리합니다.&lt;/p&gt;
&lt;h3 id=&quot;중첩-인터럽트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A4%91%EC%B2%A9-%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8&quot; aria-label=&quot;중첩 인터럽트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;중첩 인터럽트&lt;/h3&gt;
&lt;p&gt;인터럽트를 처리하는 과정에서 인터럽트 서비스 루틴이 실행되는 도중 다른 인터럽트가 발생하는 경우를 &lt;strong&gt;중첩 인터럽트(nested interrupt)&lt;/strong&gt;라고 합니다. 이 때 인터럽트 핸들러는 현재 실행 중인 인터럽트 서비스 루틴을 중단하고, 우선순위가 더 높은 인터럽트 서비스 루틴을 처리합니다.&lt;/p&gt;
&lt;h2 id=&quot;저장장치-구조storage-structrue&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%80%EC%9E%A5%EC%9E%A5%EC%B9%98-%EA%B5%AC%EC%A1%B0storage-structrue&quot; aria-label=&quot;저장장치 구조storage structrue permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;저장장치 구조(Storage Structrue)&lt;/h2&gt;
&lt;p&gt;CPU가 명령어를 실행하기 위해선 먼저 메모리에 명령을 적재해야 합니다. 범용적으로 사용되는 컴퓨터 시스템에서는 프로그램 대부분을 &lt;strong&gt;메인 메모리(RAM, random access memory)&lt;/strong&gt;라 불리는 재기록 가능한 메모리에 적재하여 사용합니다. 이 외에도 컴퓨터 전원을 켤 떄 가장 먼저 실행되는 프로그램인 부트스트랩 프로그램은 운영체제를 적재하며 읽기 전용 메모리(ROM) 또는 플래시 메모리에 적재됩니다.&lt;/p&gt;
&lt;p&gt;모든 형태의 &lt;strong&gt;메모리는 바이트 형태의 배열을 사용&lt;/strong&gt;합니다. &lt;strong&gt;각 바이트는 고유의 주소를 가지고 있어 CPU는 이 메모리를 사용해 프로그램 실행을 위한 명령어를 적재(load) 또는 저장(store)&lt;/strong&gt;합니다.&lt;/p&gt;
&lt;p&gt;현대의 컴퓨터 시스템 구조인 폰 노이만 구조의 컴퓨터 시스템은 메모리로부터 명령어를 인출(fetch)하여, 그 명령어를 명령어 레지스터(instruction register)에 저장합니다. 그리고 명령어를 레지스터로부터 읽고 명령어에 필요한 피연산자를 메모리로부터 인출하여 내부 레지스터에 저장하고 명령어를 실행합니다.&lt;/p&gt;
&lt;p&gt;이상적으로는, 모든 프로그램과 데이터에 메인 메모리에 영구히 존재하면 좋겠지만, 용량의 크기와 휘발성 메모리의 이유로 불가능합니다. 따라서 프로그램과 데이터를 저장하기 위한 저장장치로 보조저장장치를 사용합니다. 하드 디스크 드라이브(HDD)가 대표적인 예로, 메인 메모리와 비교하여 느리다는 단점이 존재하지만 &lt;strong&gt;비휘발성 메모리(NVM, non-volatile memory)&lt;/strong&gt;이기 때문에 전원이 공급되지 않더라도 내용을 잃어버리지 않습니다.&lt;/p&gt;
&lt;p&gt;일반적으로 CPU 가까이에 위치한 메모리 종류일수록 메모리가 작고 빠릅니다.&lt;/p&gt;
&lt;h2 id=&quot;입출력-구조io-structure&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EA%B5%AC%EC%A1%B0io-structure&quot; aria-label=&quot;입출력 구조io structure permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;입출력 구조(I/O Structure)&lt;/h2&gt;
&lt;p&gt;앞서 설명한 인터럽트 방식은 대량의 데이터를 이동하는데는 오버헤드를 유발할 수 있기 때문에 적합하지 않습니다. 이러한 문제를 해결하기 위해 &lt;strong&gt;직접 메모리 액세스(DMA, direct memory access)&lt;/strong&gt; 방법을 사용합니다. 장치에 대한 버퍼 및 포인터, 입출력 카운트를 설정한 후 &lt;strong&gt;CPU의 개입 없이 직접 메모리로부터 데이터를 받거나 메모리로 데이터 블록 전체를 전송&lt;/strong&gt;합니다. 한 바이트의 데이터 전송이 발생할 때 마다 인터럽트가 발생하는 것이 아니라, 하나의 데이터 블록이 전송될 때마다 인터럽트가 발생하는 것이 특징입니다. 이로 인해 데이터 블록을 전송하는 동안 CPU는 전송이 완료될 때까지 대기하지 않고 다른 작업을 처리하는 것이 가능합니다.&lt;/p&gt;
&lt;h2 id=&quot;컴퓨터-시스템-구조computer-system-architecture&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B5%AC%EC%A1%B0computer-system-architecture&quot; aria-label=&quot;컴퓨터 시스템 구조computer system architecture permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴퓨터 시스템 구조(Computer-System Architecture)&lt;/h2&gt;
&lt;h3 id=&quot;단일-프로세서-시스템single-processor-system&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EC%9D%BC-%ED%94%84%EB%A1%9C%EC%84%B8%EC%84%9C-%EC%8B%9C%EC%8A%A4%ED%85%9Csingle-processor-system&quot; aria-label=&quot;단일 프로세서 시스템single processor system permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단일 프로세서 시스템(Single-Processor System)&lt;/h3&gt;
&lt;p&gt;과거의 컴퓨터 시스템은 단일 처리 코어를 가진 하나의 CPU를 포함하는 단일 프로세서 시스템을 사용했습니다. 각 코어는 하나의 명령어를 실행하며, 데이터를 저장하기 위한 레지스터를 포함하고 있습니다. 이 때, 하나의 코어를 갖는 CPU가 하나만 있는 경우의 시스템을 &lt;strong&gt;단일 프로세서 시스템&lt;/strong&gt;이라고 부릅니다.&lt;/p&gt;
&lt;h3 id=&quot;다중-프로세서-시스템multi-processor-system&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%A4%91-%ED%94%84%EB%A1%9C%EC%84%B8%EC%84%9C-%EC%8B%9C%EC%8A%A4%ED%85%9Cmulti-processor-system&quot; aria-label=&quot;다중 프로세서 시스템multi processor system permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다중 프로세서 시스템(Multi-Processor System)&lt;/h3&gt;
&lt;p&gt;현대의 컴퓨터 시스템이 사용중인 시스템으로, 두 개 이상의 프로세서를 포함하는 구조를 의미합니다. &lt;strong&gt;프로세서는 컴퓨터 버스 및 메모리, 주변 장치를 공유&lt;/strong&gt;합니다. 이에 따라 다중 프로세서 시스템은 처리량 증가라는 장점이 있습니다. 그러나 여러 프로세서가 동시에 작동하기 위해 발생하는 오버헤드와 공유 자원에 대한 경쟁으로 인해 프로세서가 늘어난다고 해서 성능이 정비례하여 증가하지는 않습니다.&lt;/p&gt;
&lt;p&gt;일반적으로 다중 프로세서 시스템은 여러 개의 프로세서가 수행하는 방식에 따라 아래와 같이 분류할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SMP(Symmetric Multi-Processing)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;각 프로세서가 메모리와 입출력 장치를 공유하며, 모든 프로세스가 동등하게 작동합니다.&lt;/li&gt;
&lt;li&gt;각각의 프로세서는 독립적으로 실행되지만, 동일한 운영체제 이미지에서 작동합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AMP(Asymmetric Multi-Processing)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로세서가 메모리와 입출력 장치를 공유하지 않으며, 각 프로세서가 특정 작업을 담당합니다.&lt;/li&gt;
&lt;li&gt;일반적으로 하나의 프로세서는 운영체제와 관리 작업을 담당하며, 다른 프로세서들은 응용 프로그램의 실행을 담당합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HMP(Hybrid Multi-Processing)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SMP 시스템과 AMP 시스템을 결합한 형태로, 각 프로세서가 메모리와 입출력 장치를 공유하는 부분과 공유하지 않는 부분이 있습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;클러스터-시스템clustered-system&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EC%8B%9C%EC%8A%A4%ED%85%9Cclustered-system&quot; aria-label=&quot;클러스터 시스템clustered system permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클러스터 시스템(Clustered System)&lt;/h3&gt;
&lt;p&gt;클러스터 시스템은 다수의 독립적인 컴퓨터 시스템을 네트워크로 연결하여 하나의 시스템처럼 사용하는 시스템입니다. 네트워크로 연결된 이 시스템은 약하게 결합된(loosely coupled) 형태로, 각 컴퓨터는 공유 저장소에 액세스하며, 작업을 분담하여 처리합니다. 이를 통해 처리 속도와 시스템의 신뢰성 및 가용성을 높일 수 있습니다. 만약 한 노드에서 문제가 발생하면, 다른 노드가 문제가 발생한 노드의 소유권을 넘겨 받아 실행중이던 프로그램을 다시 시작할 수 있습니다. 그러나 이 시스템에서는 네트워크 대역폭, 데이터 일관성 등의 문제점이 존재합니다.&lt;/p&gt;
&lt;h1 id=&quot;운영체제의-작동os-operations&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%EC%9E%91%EB%8F%99os-operations&quot; aria-label=&quot;운영체제의 작동os operations permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;운영체제의 작동(OS Operations)&lt;/h1&gt;
&lt;p&gt;컴퓨터의 전원이 공급되면 보통 ROM 혹은 플래시 메모리에 저장된 &lt;strong&gt;부트스트랩 프로그램(bootstrap program)이 실행&lt;/strong&gt;됩니다. 부트스트랩 프로그램은 CPU 레지스터에서 장치 컨트롤러, 메모리 내용에 이르기까지의 전반적인 시스템의 모든 측면을 초기화합니다. 부트스트랩 프로그램이 수행하는 주요 작업은 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;바이오스(BIOS) 초기화&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;바이오스는 컴퓨터의 기본 입력 및 출력 시스템으로, 하드웨어의 초기화와 부팅 드라이버를 설정합니다.&lt;/li&gt;
&lt;li&gt;부트스트랩 프로그램이 실행되면, 가장 먼저 바이오스가 초기화됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;하드웨어 초기화&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU 및 메모리, 입출력 장치 등의 하드웨어를 초기화합니다.&lt;/li&gt;
&lt;li&gt;이 과정에서 메모리를 체크하여 오류가 발견되면 해당 메모리를 사용하지 않습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;부트 로더 실행&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;운영체제가 설치된 위치를 찾아 부트 로더를 실행합니다.&lt;/li&gt;
&lt;li&gt;부트 로더는 운영체제 커널 이미지를 로드하고 실행을 위한 준비 작업을 수행합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;운영체제 초기화&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;부트 로더가 운영체제 커널 이미지를 로드하면, 운영체제는 초기화됩니다.&lt;/li&gt;
&lt;li&gt;이 때 운영체제는 시스템 자원을 초기화하고 사용자 인터페이스를 시작합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;커널이 메모리에 적재되어 실행되면 시스템과 사용자에게 서비스를 제공할 수 있는 상태가 됩니다. 커널 외에도 커널이 실행되는 동안 백그라운드로 실행되는 시스템 데몬으로 일부 서비스도 같이 메모리에 적재됩니다.&lt;/p&gt;
&lt;h2 id=&quot;다중-프로그래밍과-다중-태스킹&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%A4%91-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC-%EB%8B%A4%EC%A4%91-%ED%83%9C%EC%8A%A4%ED%82%B9&quot; aria-label=&quot;다중 프로그래밍과 다중 태스킹 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다중 프로그래밍과 다중 태스킹&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;다중 프로그래밍(Multiprogramming)&lt;/strong&gt;과 &lt;strong&gt;다중 태스킹(Multitasking)&lt;/strong&gt;은 컴퓨터 시스템의 성능을 향상시키기 위해 사용되는 방법입니다. 일반적으로 하나의 프로그램으로는 항상 CPU나 입출력 장치를 바쁘게 유지하기 어렵기 때문에 운영체제는 여러 프로그램을 실행시켜 시스템 자원이 유후상태에 있는 것을 방지하려 합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;다중 프로그래밍&lt;/strong&gt;은 컴퓨터 시스템에서 여러 개의 동시에 실행되도록 하는 방법으로, 운영체제가 여러 프로세스를 동시에 메모리에 유지하고, 프로세스 중 하나를 선택하여 실행하기 시작합니다. 만약 해당 프로세스가 대기해야 하는 경우 CPU는 다른 프로세스로 전환하여 작업을 실행합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;다중 태스킹&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;은 다중 프로그래밍 방법을 논리적으로 확장한 방법으로, 컴퓨터 시스템에서 여러 개의 작업(task)이 동시에 실행되도록 하는 방법입니다. 여러 개의 작업이 동시에 실행되며, 각 작업은 별도의 프로세스로 동작합니다. 각 프로세스는 자신이 필요로 하는 자원(CPU, 메모리, 입출력 장치 등)을 독점적으로 사용합니다.&lt;/p&gt;
&lt;h2 id=&quot;이중-모드와-다중-모드dual-mode-and-multi-mode&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%EC%A4%91-%EB%AA%A8%EB%93%9C%EC%99%80-%EB%8B%A4%EC%A4%91-%EB%AA%A8%EB%93%9Cdual-mode-and-multi-mode&quot; aria-label=&quot;이중 모드와 다중 모드dual mode and multi mode permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이중 모드와 다중 모드(Dual-mode and Multi-mode)&lt;/h2&gt;
&lt;p&gt;운영체제와 사용자는 컴퓨터 시스템의 하드웨어 및 소프트웨어 자원을 공유하기 때문에 운영체제는 잘못된(혹은 악의적인) 프로그램으로 인해 다른 프로그램이나 운영체제 자체가 잘못 실행되는 경우가 없도록 보장해야 합니다. 이를 위해 운영체제는 운영체제에서 실행되는 코드와 사용자가 실행하는 코드를 구분할 수 있어야 합니다.&lt;/p&gt;
&lt;h3 id=&quot;이중-모드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%EC%A4%91-%EB%AA%A8%EB%93%9C&quot; aria-label=&quot;이중 모드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이중 모드&lt;/h3&gt;
&lt;p&gt;이를 위해 사용자 모드와 커널 모드로 분리하여 코드를 실행하는 방법을 &lt;strong&gt;이중 모드(dual mode)&lt;/strong&gt;라고 합니다. 컴퓨터 하드웨어에는 &lt;strong&gt;사용자 모드와 커널 모드를 구분하기 위한 모드 비트(mode bit)&lt;/strong&gt;가 존재하며, 이 비트가 0인 경우에 커널 모드, 1인 경우에 사용자 모드를 나타냅니다. 일반적으로 응용 프로그램이 실행될 때 사용자 모드에서 실행되며, 운영체제에서 제공하는 시스템 콜 등의 서비스를 사용하려 할 때 커널 모드로 전환 후 해당 서비스를 사용하게 됩니다.&lt;/p&gt;
&lt;p&gt;컴퓨터 시스템이 시작할 때 하드웨어는 커널 모드에서 시작하며, 운영체제가 적재되고, 사용자 모드로 전환하여 사용자 프로세스가 시작됩니다. 사용자 프로세스가 실행되는 중에 트랩이나 인터럽트가 발생할 때마다 하드웨어는 사용자 모드에서 커널모드로 전환하여 처리합니다.&lt;/p&gt;
&lt;p&gt;이렇게 운영체제의 영향을 끼칠 수 있는 명령어를 분리하고 커널 모드에서만 실행되도록 구분되어 있을 때 이와 같이 커널 모드에서만 실행 가능한 명령어를 &lt;strong&gt;특권 명령어(privileged instruction)&lt;/strong&gt;이라고 합니다. 하드웨어는 특권 명령어가 커널 모드에서 실행되는지 확인하며, 사용자 모드에서 실행하려는 경우 하드웨어는 이를 실행하지 않고 비정상적인 명령어로 간주하여 운영체제로 트랩을 겁니다. 커널 모드로 전환하는 명령어가 특권 명령어의 대표적인 예로, 이 외에도 입출력 제어, 타이머 관리 및 인터럽트 관리 등이 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;다중-모드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%A4%91-%EB%AA%A8%EB%93%9C&quot; aria-label=&quot;다중 모드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다중 모드&lt;/h3&gt;
&lt;p&gt;다중 모드는 이중 모드에서 확장된 개념으로 보안성과 안정성을 높이기 위해서 사용되는 방법으로, 커널 모드와 사용자 모드 외에  추가적인 모드를 제공하는 방법입니다. 예를 들어 가상화에서는 가상화 모드(hypervisor mode)라는 모드가 추가적으로 제공되며, 이 모드에서는 하이퍼바이저(hypervisor)가 실행되어 다수의 가상 머신을 관리합니다.&lt;/p&gt;
&lt;p&gt;사용자 프로그램이 커널 모드에서 실행되어 운영체제의 서비스를 사용하기 위해서는 &lt;strong&gt;시스템 콜(system call)&lt;/strong&gt;을 호출해야 합니다. 시스템 콜은 일반적으로 인터럽트 벡터의 특정 위치로 트랩을 거는 형태로 구성되어 있으며 보통 &lt;code class=&quot;language-text&quot;&gt;trap&lt;/code&gt; 명령어 혹은 &lt;code class=&quot;language-text&quot;&gt;syscall&lt;/code&gt; 명령어에 의해 트랩이 발생됩니다.&lt;/p&gt;
&lt;p&gt;시스템 콜은 하드웨어에 의해 하나의 소프트웨어 인터럽트로 취급되며, 전반적인 제어가 인터럽트 벡터를 통해 운영체제 내의 서비스 루틴으로 전달되고, 모드 비트가 커널 모드로 설정됩니다. 커널은 인터럽트를 발생시킨 명령어를 검사하여 어떤 시스템 콜이 발생했는지를 검사하고, 시스템 콜을 처리한 뒤 다시 원래의 명령어로 복귀합니다.&lt;/p&gt;
&lt;h2 id=&quot;타이머timer&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%83%80%EC%9D%B4%EB%A8%B8timer&quot; aria-label=&quot;타이머timer permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;타이머(Timer)&lt;/h2&gt;
&lt;p&gt;운영체제에서 &lt;strong&gt;타이머(timer)&lt;/strong&gt;는 프로세스 스케줄링과 관련된 작업을 수행하는데 사용되는 도구입니다. 사용자 프로그램이 무한 루프(infinite loop)에 빠지거나 시스템 서비스 호출에 실패하여 운영체제로 복귀하지 못하는 경우가 없도록 반드시 방지해야 합니다. 이를 위해 운영체제에서는 타이머를 사용하여 지정된 시간 이후에 인터럽트가 발생하도록 설정하여 방지할 수 있습니다.&lt;/p&gt;
&lt;p&gt;운영체제에서 타이머는 하드웨어의 타이머를 사용하여 구현되었습니다. 일반적으로 &lt;strong&gt;고정률의 클록(fixed-rate clock)과 계수기&lt;/strong&gt;를 사용하여 구현되었으며, 운영체제가 계수기 값을 설정하고, 하나의 클록 신호가 발생할 때 마다 계수기 값이 하나씩 감소하여, 계수기 값이 0이 되었을 때 인터럽트가 발생한다.&lt;/p&gt;
&lt;h1 id=&quot;자원-관리resource-management&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EC%9B%90-%EA%B4%80%EB%A6%ACresource-management&quot; aria-label=&quot;자원 관리resource management permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자원 관리(Resource Management)&lt;/h1&gt;
&lt;p&gt;운영체제는 앞서 말한 역할 외에도 자원 관리의 역할을 수행합니다. 여기서 말하는 자원이란, 시스템의 CPU, 메모리 공간 및 저장 공간, 입출력 장치 등을 의미합니다.&lt;/p&gt;
&lt;h2 id=&quot;프로세스-관리process-management&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EA%B4%80%EB%A6%ACprocess-management&quot; aria-label=&quot;프로세스 관리process management permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스 관리(Process Management)&lt;/h2&gt;
&lt;p&gt;프로그램은 디스크에 저장된 실행 가능한 파일를 의미하며, 프로세스는 실행 중인 프로그램을 의미합니다. 프로세스는 작업을 수행하기 위해 CPU 시간, 메모리, 파일 및 입출력 장치 등을 포함한 여러 가지 자원을 필요로 합니다. 이러한 자원은 프로세스가 실행되는 동안(런타임, runtime) 할당됩니다. 프로세스는 다음에 수행할 명령어를 지정하는 프로그램 카운터(PC, Program Counter)를 포함하는 능동적인 개체로, 명령어는 순차적으로 실행되며, 한 프로세스의 명령어는 반드시 하나씩 실행됩니다.&lt;/p&gt;
&lt;p&gt;이러한 프로세스를 위해 운영체제는 효율적인 프로세스 관리를 위해 아래 활동을 책임지는 역할을 갖습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자 프로세스와 시스템 프로세스의 생성과 제거&lt;/li&gt;
&lt;li&gt;프로세스와 쓰레드를 CPU에 할당하기 위한 스케줄링&lt;/li&gt;
&lt;li&gt;프로세스의 일시 중지와 재실행&lt;/li&gt;
&lt;li&gt;프로세스 동기화를 위한 기법 제공&lt;/li&gt;
&lt;li&gt;프로세스 통신을 위한 기법 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;메모리-관리memory-management&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%ACmemory-management&quot; aria-label=&quot;메모리 관리memory management permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리 관리(Memory Management)&lt;/h2&gt;
&lt;p&gt;컴퓨터 시스템에서는 메인 메모리는 앞서 설명한 것처럼 시스템이 작동하는데 중추적인 역할을 수행합니다. CPU가 명령어 인출 사이클(instruction fetch-cycle) 동안 메인 메모리로부터 명령어를 읽고, 자료 인출 사이클(data fetch-cycle) 동안 메인 메모리로부터 필요한 데이터를 읽거나 쓰는 작업을 하는데 사용하는 등 CPU가 직접 접근할 수 있는 유일한 메모리로써 그만큼 중요한 역할을 담당하고 있습니다.&lt;/p&gt;
&lt;p&gt;CPU의 이용률과 컴퓨터의 응답 속도를 개선하기 위해서 메모리에는 여러 개의 프로그램을 유지해야 하며 이를 위해서는 효율적인 메모리 관리 기법이 필요합니다. 대표적인 기법으로는 다음과 같은 예가 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단일 분할 할당(single partition allocation)&lt;/li&gt;
&lt;li&gt;다중 분할 할당(multiple partition allocation)&lt;/li&gt;
&lt;li&gt;페이지(page)&lt;/li&gt;
&lt;li&gt;세그먼트(segmentation)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이러한 메모리 관리 기법 중 어떤 기법이 적절한가는 여러 요인에 의해 결정됩니다. 특히 하드웨어 설계에 따라 선택되는 메모리 관리 기법이 달라집니다.&lt;/p&gt;
&lt;p&gt;위에서 설명한 것과 같이 효율적으로 메모리를 관리하기 위해서 운영체제는 다음과 같은 역할을 갖습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;메모리의 어느 부분이 사용되고 있으며, 어느 프로세스에 의해 사용되고 있는지 추적합니다.&lt;/li&gt;
&lt;li&gt;필요에 따라 메모리 공간을 할당하고 회수합니다.&lt;/li&gt;
&lt;li&gt;어떤 프로세스들을 메모리에 적재하고 제거할 지 결정합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;파일-시스템-관리file-system-management&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%BC-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B4%80%EB%A6%ACfile-system-management&quot; aria-label=&quot;파일 시스템 관리file system management permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파일 시스템 관리(FIle System Management)&lt;/h2&gt;
&lt;p&gt;파일 시스템 관리(file system management)는 운영체제에서 수행하는 또 다른 중요한 역할입니다. 저장장치의 물리적인 특징을 추상화하여 논리적인 저장 단위인 파일로 데이터를 관리합니다. 운영체제는 파일을 물리적 매체로 매핑하여 저장장치를 통해 파일에 접근할 수 있습니다.&lt;/p&gt;
&lt;p&gt;운영체제는 파일 시스템 관리를 위해 다음과 같은 역할을 수행합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파일 및 디렉토리 생성, 삭제, 이동, 복사 등의 작업을 수행합니다.&lt;/li&gt;
&lt;li&gt;파일 및 디렉토리의 보안을 관리하고, 접근 권한을 설정합니다.&lt;/li&gt;
&lt;li&gt;파일 및 디렉토리의 백업 및 복구 기능을 제공합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;파일 시스템은 다양한 종류가 있으며, 운영체제가 제공하는 파일 시스템 외에도 다양한 파일 시스템이 존재합니다. 대표적인 파일 시스템으로는 FAT, NTFS, ext, HFS 등이 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;캐시-관리cache-management&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BA%90%EC%8B%9C-%EA%B4%80%EB%A6%ACcache-management&quot; aria-label=&quot;캐시 관리cache management permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;캐시 관리(Cache Management)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;캐싱(caching)&lt;/strong&gt;은 컴퓨터 시스템에서 중요한 원리입니다. 데이터는 메인 메모리와 같은 저장장치에 저장되는데, 자주 사용되는 데이터는 &lt;strong&gt;더 적은 용량을 갖지만 더 빠른 읽기 및 쓰기 속도를 갖는 캐시에 일시적으로 복사하여 사용&lt;/strong&gt;합니다. CPU 내부의 레지스터들 또한 메인 메모리를 위한 캐시로 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;캐시는 앞서 말한 것처럼 크기가 제한되어 있으므로 &lt;strong&gt;캐시 관리&lt;/strong&gt;는 중요한 문제입니다. 캐시의 크기와 교체 알고리즘을 적절하게 선택하면 캐시의 성능을 크게 향상시킬 수 있습니다.&lt;/p&gt;
&lt;p&gt;캐시와 메모리는 계층적인 구조 형태를 갖고 있습니다. CPU에 가장 가까운 레지스터부터 L1 캐시 및 L2 캐시, 그리고 메인 메모리와 보조 저장 장치 순으로 계층적인 구조를 가집니다. 오직 하나의 프로세스만을 사용하는 컴퓨터 시스템에서는 이러한 계층적인 구조가 문제가 되지 않지만, 여러 개의 프로세스가 실행되는 상황에서는 이야기가 달라집니다. 예를 들어, 여러 개의 프로세스가 데이터 A를 필요로 하는 상황에서 첫 번째 프로세스가 특정 계층에 있는 데이터 A를 갱신했다고 했을 때, 다른 프로세스가 다른 계층에 있는 데이터 A를 가져왔을 때 갱신된 데이터 A를 가져올 수 있어야 합니다.  즉, &lt;strong&gt;특정 데이터가 갱신되는 경우 해당 데이터가 존재하는 모든 캐시에 즉각적으로 반영될 수 있어야 합니다.&lt;/strong&gt; 이러한 문제를 &lt;strong&gt;캐시 일관성 문제&lt;/strong&gt;라고 합니다.&lt;/p&gt;
&lt;h2 id=&quot;입출력-시스템-관리io-system-management&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B4%80%EB%A6%ACio-system-management&quot; aria-label=&quot;입출력 시스템 관리io system management permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;입출력 시스템 관리(I/O System Management)&lt;/h2&gt;
&lt;p&gt;운영체제는 입출력 장치와의 상호작용을 조율하고, 입출력 작업이 원할하게 수행하도록 입출력 시스템을 관리합니다. 일반적으로 입출력 시스템은 다음과 같이 구성되어 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;버퍼링, 캐싱, 스풀링 등을 포함한 메모리 관리 요소&lt;/li&gt;
&lt;li&gt;일반적인 장치 드라이버 인터페이스&lt;/li&gt;
&lt;li&gt;특정 하드웨어 장치들을 위한 드라이버&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;입출력 시스템 관리의 핵심은 입출력 장치의 다양한 특성과 작동 방식을 규격화하여 시스템과 상호작용할 수 있는 방식을 효율적으로 제공하는 것입니다.&lt;/p&gt;
&lt;h1 id=&quot;보안과-보호security-and-protection&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B3%B4%EC%95%88%EA%B3%BC-%EB%B3%B4%ED%98%B8security-and-protection&quot; aria-label=&quot;보안과 보호security and protection permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;보안과 보호(Security and Protection)&lt;/h1&gt;
&lt;p&gt;컴퓨터 시스템은 다수의 사용자를 가지며 다수의 프로세스 작업을 병행으로 수행하기 때문에 데이터에 대한 접근은 반드시 규제되어야 합니다. 이를 위해 운영체제로부터 허가를 획득한 프로세스만이 작업할 수 있도록 보장하는 방법이 필요합니다.&lt;/p&gt;
&lt;p&gt;이를 위해 운영체제에서는 시스템 내부에서 자원에 대한 접근을 제어하여 안전하게 &lt;strong&gt;보호(protection)&lt;/strong&gt;하고 있습니다. 프로세스 간 혹은 사용자 간에 자원 공유가 발생하면, 다른 프로세스가 사용자가 자원에 대한 무단 접근을 시도할 수 있으므로, 이를 방지하기 위해 컴퓨터 시스템은 보호 메커니즘을 사용하여 각 프로세스 혹은 사용자에게 필요한 자원만 제공합니다.&lt;/p&gt;
&lt;p&gt;컴퓨터 시스템이 충분한 보호 기능을 가지고 있더라도 여전히 부적절한 접근이 발생할 수 있습니다. 예를 들어, 사용자의 인증 정보가 도난당했다고 가정하면, 파일과 메모리 보호 기능이 아무리 잘 작동하더라도 사용자의 데이터는 복사 혹은 삭제될 수 있습니다. 이러한 외부 혹은 내부의 공격을 방어하는 것이 &lt;strong&gt;보안(security)&lt;/strong&gt; 기능입니다.  시스템의 많은 범위에 대해 공격이 가능한 바이러스, 웜, 서비스 거부 공격 등으로부터 컴퓨터 시스템은 보호합니다. 일반적으로 사용자 인증, 권한 관리, 암호화, 방화벽 등 다양한 기술이 사용됩니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Functools in Python]]></title><description><![CDATA[Introduction 파이썬에서 기본적으로 제공하는 모듈 중 하나인  모듈은 고차 함수(high-order function…]]></description><link>https://hangjoo.github.io/python/functools-in-python/</link><guid isPermaLink="false">https://hangjoo.github.io/python/functools-in-python/</guid><pubDate>Sat, 18 Feb 2023 00:03:08 GMT</pubDate><content:encoded>&lt;h1 id=&quot;introduction&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#introduction&quot; aria-label=&quot;introduction permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
&lt;p&gt;파이썬에서 기본적으로 제공하는 모듈 중 하나인 &lt;code class=&quot;language-text&quot;&gt;functools&lt;/code&gt; 모듈은 고차 함수(high-order function) 작업을 편리하게 할 수 있는 유용한 기능을 제공합니다. 고차 함수란 함수를 반환하거나 함수를 인자로 받는 함수를 의미하며, 고차 함수를 사용하여 함수나 호출 가능한 객체를 쉽게 재사용하거나 확장할 수 있어 유지보수가 용이한 코드를 작성할 수 있다는 장점이 있습니다.&lt;/p&gt;
&lt;h1 id=&quot;functions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#functions&quot; aria-label=&quot;functions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Functions&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;functools&lt;/strong&gt;에서 제공하는 기능들은 아래와 같습니다.&lt;/p&gt;
&lt;h2 id=&quot;cache&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cache&quot; aria-label=&quot;cache permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;cache&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; cache

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@cache&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;some_fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;파이썬 3.9 버전에 추가된 데코레이터로, 인자에 대한 함수 결과를 캐싱하여 동일한 인자로 함수가 다시 호출되었을 때 캐싱된 결과를 반환하는 함수입니다. 이 데코레이터는 함수의 결과를 캐시하기 위해 내부적으로 딕셔너리를 사용하여 저장합니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;cache&lt;/code&gt; 데코레이터는 &lt;strong&gt;함수의 인자 값을 키로 사용하여 함수의 결과를 캐싱하기 때문에 함수의 인자는 불변형(immutable)이어야 합니다.&lt;/strong&gt; 만약 리스트나 딕셔너리와 같이 가변형 파라미터를 사용하는 함수를 사용하는 경우 캐시에 문제가 발생할 수 있습니다. &lt;strong&gt;또 동일한 인자에 대해 다른 함수 결과를 반환할 가능성이 있는 경우에 &lt;code class=&quot;language-text&quot;&gt;cache&lt;/code&gt; 데코레이터를 사용하는 경우에도 문제가 발생할 수 있습니다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;또한 내부적으로 함수 결과를 딕셔너리를 사용해서 저장하기 때문에 &lt;strong&gt;메모리 사용량&lt;/strong&gt;에 유의해야 합니다.&lt;/p&gt;
&lt;p&gt;추가로 함수 결과를 저장할 때 전달된 인자 기준으로 함수 결과가 저장되기 때문에 키워드 인자를 사용하는 경우 예상한 캐시 결과가 반환되지 않을 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; cache
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; sleep

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@cache&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sleep_add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sleep_time&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    sleep&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sleep_time&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b

&lt;span class=&quot;token comment&quot;&gt;# 아래 4번의 호출 모두 캐싱된 결과를 사용하지 않고 5초 후 덧셈 결과가 출력됩니다.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sleep_add&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sleep_add&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sleep_add&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sleep_time&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sleep_add&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sleep_time&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 코드의 주석과 같이 실제 함수 인자는 동일한 값이 전달되나 내부 딕셔너리에 결과를 저장되는 키 값이 모두 달라지기 때문에 5초 후 덧셈 결과가 출력됩니다. &lt;strong&gt;이와 같은 결과가 발생하는 이유는 &lt;code class=&quot;language-text&quot;&gt;cache&lt;/code&gt; 데코레이터가 내부적으로 함수에 전달된 인자를 전달 받을 때 &lt;code class=&quot;language-text&quot;&gt;*args, **kwargs&lt;/code&gt; 와 같이 인자를 전달 받기 때문에 실제 함수에 키워드를 사용하냐 아니냐에 따라 &lt;code class=&quot;language-text&quot;&gt;args&lt;/code&gt; 또는 &lt;code class=&quot;language-text&quot;&gt;kwargs&lt;/code&gt; 에 전달되기 때문에 생성되는 키 값이 달라집니다.&lt;/strong&gt; 따라서 &lt;code class=&quot;language-text&quot;&gt;cache&lt;/code&gt; 데코레이터를 사용하는 경우 이러한 키워드 인자에도 유의해야 합니다.&lt;/p&gt;
&lt;h2 id=&quot;cached_property&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cached_property&quot; aria-label=&quot;cached_property permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;cached_property&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; cached_property

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SomeClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@cached_property&lt;/span&gt;&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;some_property&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;파이썬 3.8 버전에 추가된 데코레이터로, &lt;code class=&quot;language-text&quot;&gt;cached_property&lt;/code&gt;는 클래스에서 사용되는 &lt;code class=&quot;language-text&quot;&gt;property&lt;/code&gt;와 동일하게 동작하지만 &lt;strong&gt;반환 값을 캐싱한다는 점&lt;/strong&gt;이 다릅니다. 클래스의 속성을 반환하는 &lt;code class=&quot;language-text&quot;&gt;property&lt;/code&gt;에서 속성을 반환하는데 오랜 시간이 걸릴 때 주로 사용합니다.&lt;/p&gt;
&lt;p&gt;다만 기존의 &lt;code class=&quot;language-text&quot;&gt;property&lt;/code&gt; 데코레이터는 &lt;code class=&quot;language-text&quot;&gt;setter&lt;/code&gt;가 정의되지 않은 경우 속성 값 쓰기가 금지된 반면, &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;cached_property&lt;/code&gt; 데코레이터는 &lt;code class=&quot;language-text&quot;&gt;setter&lt;/code&gt; 정의 없이도 해당 속성에 쓰기가 가능합니다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;캐시 된 값을 삭제할 필요가 있는 경우에는 해당 속성 값을 삭제하여 캐시 된 속성 값을 삭제할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;lru_cache&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#lru_cache&quot; aria-label=&quot;lru_cache permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;lru_cache&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; lru_cache

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@lru_cache&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;some_fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@lru_cache&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;max_size&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; typed&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;some_fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;파이썬 3.2 버전에 추가된 데코레이터로, &lt;code class=&quot;language-text&quot;&gt;cache&lt;/code&gt; 데코레이터와 동일하게 함수의 결과 값을 캐싱하는 데코레이터입니다. &lt;strong&gt;다만 최대 &lt;code class=&quot;language-text&quot;&gt;maxsize&lt;/code&gt;만큼의 함수 결과 값을 저장한다는 점이 다릅니다. 동일하게 함수 결과 값을 캐시하는데 내부적으로 딕셔너리를 사용하기 때문에 함수의 인자는 해시 가능한 불변형이어야 합니다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;또한 키워드 인자를 사용 여부에 따라서도 다른 키 값을 갖습니다. 즉 서로 다른 인자 패턴에 대해 별도의 캐시 항목을 갖기 때문에 키워드 인자 사용에 유의가 필요합니다. 에를 들어 &lt;code class=&quot;language-text&quot;&gt;f(a=1, b=2)&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;f(b=2, a=1)&lt;/code&gt;은 전달 되는 인자 값은 같으나 인자의 순서가 다르기 때문에 별도의 캐시 항목을 갖습니다.&lt;/p&gt;
&lt;p&gt;위 코드의 두 번째 예시처럼 &lt;code class=&quot;language-text&quot;&gt;lru_cache&lt;/code&gt; 사용시 &lt;code class=&quot;language-text&quot;&gt;max_size&lt;/code&gt; 인자와 &lt;code class=&quot;language-text&quot;&gt;typed&lt;/code&gt; 인자를 전달할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;max_size&lt;/code&gt; 인자는 몇 개의 캐시를 저장할지 나타내는 인자로 기본 값은 128이며, None으로 설정할 시 LRU 기능이 비활성화되고 캐시를 제한 없이 저장합니다. 만약 저장된 캐시의 수가 &lt;code class=&quot;language-text&quot;&gt;max_size&lt;/code&gt;에 도달하면 LRU 알고리즘에 의해 가장 오래된 캐시 값이 삭제됩니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;typed&lt;/code&gt; 인자는 인자의 타입을 확인하는 인자로 True인 경우 같은 값을 같더라도 서로 다른 타입인 경우 별도의 캐시 값을 갖습니다. 예를 들어, &lt;code class=&quot;language-text&quot;&gt;f(3)&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;f(3.0)&lt;/code&gt;은 &lt;code class=&quot;language-text&quot;&gt;typed=True&lt;/code&gt;인 경우 다른 캐시 값을 갖습니다.&lt;/p&gt;
&lt;h2 id=&quot;total_ordering&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#total_ordering&quot; aria-label=&quot;total_ordering permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;total_ordering&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; total_ordering

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@total_ordering&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SomeClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;__lt__&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; other&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;파이썬 3.2 버전에 추가된 데코레이터로, 클래스의 매직 메소드 중 &lt;strong&gt;비교하는데 사용되는 매직 메소드가 정의되어 있는 경우 비교하는데 사용되는 나머지 매직 메소드를 제공하는 데코데이터&lt;/strong&gt;입니다.&lt;/p&gt;
&lt;p&gt;비교하는데 사용되는 매직 메소드는 &lt;code class=&quot;language-text&quot;&gt;__lt__&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;__le__&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;__gt__&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;__ge__&lt;/code&gt; 그리고 &lt;code class=&quot;language-text&quot;&gt;__eq__&lt;/code&gt; 입니다. &lt;code class=&quot;language-text&quot;&gt;__eq__&lt;/code&gt; 메소드와 앞의 4개의 메소드 중 하나라도 구현이 된 상태에서 &lt;code class=&quot;language-text&quot;&gt;total_ordering&lt;/code&gt; 데코레이터를 사용하면 해당 데코레이터가 나머지 메소드를 제공합니다.&lt;/p&gt;
&lt;p&gt;이 데코레이터를 사용하면 모든 비교 연산에서 동작하는 클래스를 쉽게 구현할 수 있으나, 제공된 매직 메소드에서 실행 속도가 느려지고, 스택 트레이스(stack trace)가 복잡해지는 단점이 있습니다. 따라서 성능 벤치마킹 시에 이 부분이 병목임이 확인되면 &lt;code class=&quot;language-text&quot;&gt;total_ordering&lt;/code&gt; 데코레이터를 사용하지 않고 매직 메소드를 모두 구현하는 것이 바람직합니다.&lt;/p&gt;
&lt;h2 id=&quot;partial&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#partial&quot; aria-label=&quot;partial permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;partial&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; partial

&lt;span class=&quot;token comment&quot;&gt;# example&lt;/span&gt;
bin_num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; partial&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; base&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# int 함수의 키워드 인자인 base 인자를 2로 고정합니다.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bin_num&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;10010&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 18&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;함수의 위치 인자 또는 키워드 인자의 일부를 고정한 &lt;code class=&quot;language-text&quot;&gt;partial&lt;/code&gt; 객체를 반환하는 함수&lt;/strong&gt;입니다. &lt;code class=&quot;language-text&quot;&gt;partial&lt;/code&gt; 함수의 첫 번째 인자는 &lt;code class=&quot;language-text&quot;&gt;partial&lt;/code&gt; 객체로 변환할 함수이며, 위치 인자와 키워드 인자는 첫 번째 인자로 전달된 함수의 위치 인자와 키워드 인자로 고정하는데 사용됩니다.&lt;/p&gt;
&lt;p&gt;위 코드 예시처럼 &lt;code class=&quot;language-text&quot;&gt;int&lt;/code&gt; 함수의 base 키워드 인자를 2로 고정한 &lt;code class=&quot;language-text&quot;&gt;partial&lt;/code&gt; 객체를 생성하여 이진수로 변환하는 함수를 쉽게 생성할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;partialmethod&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#partialmethod&quot; aria-label=&quot;partialmethod permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;partialmethod&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; partial_method

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SomeClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;set_state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;_state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; state

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;        set_alive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; partialmethod&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set_state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;alive&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;        set_dead &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; partialmethod&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set_state&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;dead&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;파이썬 3.4 버전에 추가된 &lt;code class=&quot;language-text&quot;&gt;partialmethod&lt;/code&gt; 함수는 &lt;code class=&quot;language-text&quot;&gt;partial&lt;/code&gt;과 동일하게 동작하지만 직접 호출이 아닌 메소드 정의로 사용되는 함수입니다.&lt;/p&gt;
&lt;h2 id=&quot;reduce&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#reduce&quot; aria-label=&quot;reduce permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;reduce&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;reduce&lt;/span&gt;

&lt;span class=&quot;token builtin&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 15&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; initializer&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 20&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;reduce&lt;/code&gt; 함수는 순회 가능한 객체를 인자로 받아 &lt;strong&gt;두 개의 인자를 전달 받는 함수를 사용하여 결과를 누적하는 함수&lt;/strong&gt;입니다. &lt;code class=&quot;language-text&quot;&gt;reduce&lt;/code&gt; 함수의 첫 번째 인자 &lt;code class=&quot;language-text&quot;&gt;function&lt;/code&gt;은 두 개의 인자를 받는 함수로 첫 번째 인자는 누적 결과를, 두 번째 인자는 순회 가능한 객체의 요소입니다. &lt;code class=&quot;language-text&quot;&gt;reduce&lt;/code&gt; 함수의 &lt;code class=&quot;language-text&quot;&gt;initializer&lt;/code&gt; 인자가 전달되면 누적 값은 &lt;code class=&quot;language-text&quot;&gt;initializer&lt;/code&gt;부터 시작하여 계산됩니다. &lt;code class=&quot;language-text&quot;&gt;initializer&lt;/code&gt;가 전달되지 않는 경우 누적 값은 객체의 첫 번째 요소부터 시작됩니다.&lt;/p&gt;
&lt;h2 id=&quot;singledispatch&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#singledispatch&quot; aria-label=&quot;singledispatch permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;singledispatch&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; singledispatch

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@singledispatch&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;some_fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Default Implementation&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@some_fn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Integer Implementation&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@some_fn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;String Implementation&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 데코레이터에 타입을 전달하는 대신 인자의 타입 어노테이션으로 사용할 수 있습니다.&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@some_fn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;register&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arg&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;String Implementation&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;파이썬 3.4 버전에 추가된 &lt;code class=&quot;language-text&quot;&gt;singledispatch&lt;/code&gt; 데코레이터는 &lt;strong&gt;함수를 제너릭 함수로 만드는 데코레이터&lt;/strong&gt;입니다.  제네릭 함수는 인자의 타입에 따라 다른 함수가 실행되도록 합니다. 일반적으로 파이썬은 동적 타입 언어로 인자의 타입을 제한할 필요가 있는 경우 함수 내부에서 검사하여 타입에 맞는 함수가 실행되도록 구현되는데, &lt;code class=&quot;language-text&quot;&gt;singledispatch&lt;/code&gt; 데코레이터를 사용하면 인자의 타입에 따라 다른 함수가 동적으로 실행되도록 할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;singledispatchmethod&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#singledispatchmethod&quot; aria-label=&quot;singledispatchmethod permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;singledispatchmethod&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; singledispatchmethod

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SomeClass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@singledispatchmethod&lt;/span&gt;&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;some_method&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Default Method&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@some_method&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Integer Method&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;# 위 함수와 동일합니다.&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@some_method&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;register&lt;/span&gt;&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arg&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Integer Method&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;singledispatchmethod&lt;/code&gt; 데코레이터는 &lt;code class=&quot;language-text&quot;&gt;singledispatch&lt;/code&gt; 데코레이터의 클래스 메소드 전용 데코레이터입니다.&lt;/p&gt;
&lt;h2 id=&quot;update_wrapper&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#update_wrapper&quot; aria-label=&quot;update_wrapper permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;update_wrapper&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; update_wrapper

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;some_decorator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;func&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; func&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    update_wrapper&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;wrapper&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; func&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; wrapper&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;데코레이터를 정의할 때 감싸진 함수의 속성을 사용하도록 wrapper 함수의 속성을 갱신하는 함수&lt;/strong&gt;입니다. 일반적으로 데코레이터를 생성할 때 사용되는 wrapper 함수는 원본 함수의 독스트링(docstring), 어노테이션(annotation) 등의 정보를 잃어버리는데, &lt;code class=&quot;language-text&quot;&gt;update_wrapper&lt;/code&gt; 함수는 이러한 정보를 유지할 수 있도록 도와줍니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;update_wrapper&lt;/code&gt; 함수에 전달가능한 인자는 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;wrapper&lt;/code&gt; : &lt;code class=&quot;language-text&quot;&gt;wrapped&lt;/code&gt; 함수를 감싼 함수로 &lt;code class=&quot;language-text&quot;&gt;assigned&lt;/code&gt; 인자와 &lt;code class=&quot;language-text&quot;&gt;updated&lt;/code&gt; 인자에 명시된 속성을 따라 &lt;code class=&quot;language-text&quot;&gt;wrapped&lt;/code&gt; 함수로부터 해당 속성 값을 가져옵니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;wrapped&lt;/code&gt; : 감싸지게 되는 원본 함수입니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;assigned&lt;/code&gt; : &lt;code class=&quot;language-text&quot;&gt;wrapper&lt;/code&gt; 함수에 할당할 속성명이 정의된 문자열 튜플로, 기본 값은 &lt;code class=&quot;language-text&quot;&gt;functools.WRAPPER_ASSIGNMENTS&lt;/code&gt; 이며 &lt;code class=&quot;language-text&quot;&gt;(__module__, __name__, __qualname__, __doc__, __annotations__)&lt;/code&gt; 와 같습니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;updated&lt;/code&gt; : &lt;code class=&quot;language-text&quot;&gt;wrapper&lt;/code&gt; 함수에서 업데이트할 속성명이 정의된 문자열 튜플로, 기본 값은 &lt;code class=&quot;language-text&quot;&gt;functools.WRAPPER_UPDATES&lt;/code&gt; 이며 &lt;code class=&quot;language-text&quot;&gt;(__dict__,)&lt;/code&gt; 와 같습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;wraps&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#wraps&quot; aria-label=&quot;wraps permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;wraps&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight has-highlighted-lines&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; wraps

&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;some_decorator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;func&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;    &lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@wraps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;func&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; func&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;kwargs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; wrapper&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;wraps&lt;/code&gt; 데코레이터는 데코레이터를 정의할 때 &lt;code class=&quot;language-text&quot;&gt;update_wrapper&lt;/code&gt;를 편하게 사용하기 위한 데코레이터&lt;/strong&gt;입니다. wrapper 함수를 정의할 때 &lt;code class=&quot;language-text&quot;&gt;wraps(func)&lt;/code&gt;와 같이 원본 함수를 인자로 전달한 &lt;code class=&quot;language-text&quot;&gt;wraps&lt;/code&gt; 데코레이터를 사용하여 원본 함수의 속성들을 &lt;code class=&quot;language-text&quot;&gt;wrapper&lt;/code&gt; 함수에 사용할 수 있습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Itertools in Python]]></title><description><![CDATA[Introduction 파이썬에서 기본으로 제공하는 모듈로, 이터레이터(iterator…]]></description><link>https://hangjoo.github.io/python/itertools-in-python/</link><guid isPermaLink="false">https://hangjoo.github.io/python/itertools-in-python/</guid><pubDate>Wed, 25 Jan 2023 22:01:06 GMT</pubDate><content:encoded>&lt;h1 id=&quot;introduction&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#introduction&quot; aria-label=&quot;introduction permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introduction&lt;/h1&gt;
&lt;p&gt;파이썬에서 기본으로 제공하는 모듈로, &lt;strong&gt;이터레이터(iterator)&lt;/strong&gt;와 관련된 기능을 제공합니다. 인자로 전달된 &lt;strong&gt;반복가능한 객체&lt;/strong&gt;를 기반으로 무한히 반복하는 이터레이터를 생성하거나 특정 기능이 적용된 이터레이터를 생성할 수 있습니다. 예를 들어, itertools에서 제공하는 함수 중 &lt;code class=&quot;language-text&quot;&gt;count(x)&lt;/code&gt; 함수는 x부터 하나씩 순차적으로 증가하는 이터레이터를 반환합니다.&lt;/p&gt;
&lt;p&gt;itertools에서 제공하는 함수들은 &lt;strong&gt;빠르고 메모리 효율적&lt;/strong&gt;으로 동작하도록 구현되어 있어 이터레이터 관련해서 작업이 필요할 때 성능에 대한 고민 없이 itertools에서 제공하는 기능의 조합으로 빠르게 구현할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;iterable-and-iterator&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#iterable-and-iterator&quot; aria-label=&quot;iterable and iterator permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Iterable and Iterator&lt;/h2&gt;
&lt;p&gt;파이썬에서 &lt;strong&gt;iterable&lt;/strong&gt;은 반복 가능한 혹은 반복 가능한 객체를 의미합니다. 대표적인 반복 가능한 객체(Iterable Object)는 리스트, 문자열, 튜플 등이 있습니다. 이러한 반복가능한 객체는 &lt;code class=&quot;language-text&quot;&gt;iter(iterable)&lt;/code&gt; 함수를 통해 &lt;strong&gt;이터레이터(Iterator)&lt;/strong&gt;로 변환할 수 있습니다. &lt;code class=&quot;language-text&quot;&gt;iter()&lt;/code&gt; 함수는 인자로 전달된 반복 가능한 객체 내부의 매직 메소드인 &lt;code class=&quot;language-text&quot;&gt;__iter__&lt;/code&gt; 함수를 호출하여 이터레이터를 생성합니다. 만약 &lt;code class=&quot;language-text&quot;&gt;__iter__&lt;/code&gt; 함수가 정의되어 있지 않은 경우 또 다른 매직 메소드인 &lt;code class=&quot;language-text&quot;&gt;__getitem__&lt;/code&gt;을 호출하여 첫 번째 인덱스부터 순차적으로 항목을 꺼내옵니다.&lt;/p&gt;
&lt;p&gt;이렇게 생성된 이터레이터는 &lt;code class=&quot;language-text&quot;&gt;next(iterator)&lt;/code&gt; 함수를 통해 순차적으로 객체 내부의 항목에 접근할 수 있습니다. &lt;code class=&quot;language-text&quot;&gt;next()&lt;/code&gt;를 사용하여 호출된 이터레이터는 클래스 내부에 구현된 매직 메소드 &lt;code class=&quot;language-text&quot;&gt;__next__&lt;/code&gt;를 호출하여 객체 내부의 항목에 접근합니다. &lt;code class=&quot;language-text&quot;&gt;next()&lt;/code&gt; 함수를 사용하여 이터레이터의 모든 항목을 꺼낸 뒤 한 번 더 호출하면 &lt;code class=&quot;language-text&quot;&gt;StopIteration&lt;/code&gt; 예외를 발생시킵니다.&lt;/p&gt;
&lt;p&gt;아래는 하나의 리스트를 생성하고, 이를 이터레이터로 변한한 뒤 모든 항목을 꺼낸 뒤 발생된 예외를 확인하는 코드입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;a_list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
a_iterator &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a_list&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token builtin&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a_iter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 1&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a_iter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 2&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a_iter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 3&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a_iter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 4&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a_iter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 5&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a_iter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# StopIternation 예외 발생&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;functions&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#functions&quot; aria-label=&quot;functions permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Functions&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;itertools&lt;/strong&gt;에서 제공하는 함수들은 아래와 같습니다.&lt;/p&gt;
&lt;h2 id=&quot;accumulate&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#accumulate&quot; aria-label=&quot;accumulate permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;accumulate&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; accumulate

accumulate&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;iterable&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; func&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;operator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;add&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; initial&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;accumulate&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;                &lt;span class=&quot;token comment&quot;&gt;# 1   3   6   10  15&lt;/span&gt;
accumulate&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; initial&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;# 100 101 103 106 110 115&lt;/span&gt;
accumulate&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; operator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mul&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 1   2   6   24  120&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;iterable&lt;/code&gt; 인자에 대해 계산된 함수 &lt;code class=&quot;language-text&quot;&gt;func&lt;/code&gt;의 누적 결과를 반환하는 이터레이터를 반환합니다.&lt;/p&gt;
&lt;p&gt;func로 전달되는 함수는 두 개의 인자를 전달 받는 함수로 첫 번째 인자에 현재 누적 결과와 두 번째 인자에 새롭게 누적할 iterable 인자의 항목이 전달됩니다. func의 기본 인자인 operator.add는 두 인자의 덧셈 결과를 반환하는 함수입니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;initial&lt;/code&gt; 인자가 전달되는 경우 initial 값부터 누적이 시작되어 반환된 이터레이터가 iterable보다 항목가 하나 더 많고, 기본 값인 None인 경우 iterable의 첫 번째 항목을 누적 결과 시작으로 사용합니다.&lt;/p&gt;
&lt;h2 id=&quot;chain&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#chain&quot; aria-label=&quot;chain permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;chain&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; chain

chain&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;iterables&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# case 1&lt;/span&gt;
chain&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;y&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;z&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# a b c 1 2 3 x y z&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# case 2&lt;/span&gt;
array_2d &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
chain&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;array_2d&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 0 1 2 3 4 5 6 7 8 9&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;첫 번째로 전달된 반복가능한 객체에서 항목을 꺼내고 모든 항목을 꺼내면 다음 객체로 넘어가 항목을 꺼내오는 이터레이터를 생성합니다. 보통 여러 시퀀스를 하나로 연결한 단일 시퀀스처럼 처리하는 경우 사용합니다.&lt;/p&gt;
&lt;h2 id=&quot;combinations&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#combinations&quot; aria-label=&quot;combinations permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;combinations&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; combinations

combinations&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;iterable&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# case 1&lt;/span&gt;
combinations&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ABCD&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# AB AC AD BC BD CD&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# case 2&lt;/span&gt;
combinations&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 012 013 023 123&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;첫 번째 인자 &lt;code class=&quot;language-text&quot;&gt;iterable&lt;/code&gt;의 항목들을 사용하여 길이 &lt;code class=&quot;language-text&quot;&gt;r&lt;/code&gt;이 되는 조합을 항목으로 갖는 이터레이터를 반환합니다.&lt;/p&gt;
&lt;h2 id=&quot;combinations_with_replacement&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#combinations_with_replacement&quot; aria-label=&quot;combinations_with_replacement permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;combinations_with_replacement&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; combinations_with_replacement

combinations_with_replacement&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;iterable&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;combinations_with_replacement&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ABC&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# AA AB AC BB BC CC&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;첫 번째 인자 &lt;code class=&quot;language-text&quot;&gt;iterable&lt;/code&gt;의 항목들을 &lt;strong&gt;중복으로&lt;/strong&gt; 사용하여 길이 &lt;code class=&quot;language-text&quot;&gt;r&lt;/code&gt;이 되는 모든 조합을 항목으로 갖는 이터레이터를 반환합니다.&lt;/p&gt;
&lt;h2 id=&quot;compress&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#compress&quot; aria-label=&quot;compress permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;compress&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; compress

compress&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; selectors&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# case 1&lt;/span&gt;
compress&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ABCDEF&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# A C E F&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# case 2&lt;/span&gt;
compress&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ABCDEF&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# A C&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# case 3&lt;/span&gt;
compress&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ABC&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# A C&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;data&lt;/code&gt; 인자와 &lt;code class=&quot;language-text&quot;&gt;selectors&lt;/code&gt; 인자의 항목들을 같이 순회하면서 &lt;code class=&quot;language-text&quot;&gt;selectors&lt;/code&gt; 의 항목이 True인 &lt;code class=&quot;language-text&quot;&gt;data&lt;/code&gt; 의 항목만을 요소로 갖는 이터레이터를 반환합니다. 만약 &lt;code class=&quot;language-text&quot;&gt;data&lt;/code&gt; 인자와 &lt;code class=&quot;language-text&quot;&gt;selectors&lt;/code&gt; 인자의 길이가 같지 않으면 더 짧은 인자까지만 순회하고 중지합니다.&lt;/p&gt;
&lt;h2 id=&quot;count&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#count&quot; aria-label=&quot;count permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;count&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; count

count&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; step1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# case 1&lt;/span&gt;
count&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 10 11 12 13 14 ...&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# case 2&lt;/span&gt;
count&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 2.5 3.0 3.5 4.0 ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;start&lt;/code&gt; 인자부터 시작하여 &lt;code class=&quot;language-text&quot;&gt;step&lt;/code&gt;만큼 증가하는 무한한 이터레이터를 반환합니다.&lt;/p&gt;
&lt;h2 id=&quot;cycle&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cycle&quot; aria-label=&quot;cycle permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;cycle&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; cycle

cycle&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;iterable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# case 1&lt;/span&gt;
cycle&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ABCD&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# A B C D A B C D A B ...&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# case 2&lt;/span&gt;
cycle&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 1 2 3 1 2 3 1 2 ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;iterable&lt;/code&gt; 인자의 항목을 무한히 순회하는 이터레이터를 반환합니다.&lt;/p&gt;
&lt;h2 id=&quot;groupby&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#groupby&quot; aria-label=&quot;groupby permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;groupby&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; groupby

groupby&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;iterable&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# case 1&lt;/span&gt;
groupby&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;AAAABBBCCDAA&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# (A, AAAA) (B, BBB) (C, CC) (D, D) (A, AA)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# case 2&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; group &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; groupby&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;group&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# 1, [1, 1, 1]&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# 2, [2, 2]&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# 3, [3, 3, 3]&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# case 3&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; k&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; g &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; groupby&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;g&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# 1 [1, 1]&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# 0 [2, 4, 6]&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# 1 [9, 11]&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# 0 [14, 14]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;iterable&lt;/code&gt; 인자에서 연속된 항목끼리 그룹으로 묶은 항목을 갖는 이터레이터를 반환합니다. 반환된 이터레이터 항목의 첫 번째 원소는 그룹으로 묶인 항목을 반환하고, 두 번째 원소는 묶인 그룹에 대한 이터레이터를 갖습니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt; 인자는 그룹으로 묶을 때 사용되는 함수로 하나의 인자를 가지며 &lt;code class=&quot;language-text&quot;&gt;iterable&lt;/code&gt; 인자의 항목이 전달됩니다. &lt;code class=&quot;language-text&quot;&gt;key&lt;/code&gt; 인자로 전달된 함수를 통해 같은 값을 갖는 항목이 연속으로 존재하는 경우 그룹으로 묶이며 기본 값인 None은 항목 자체를 그대로 사용합니다.&lt;/p&gt;
&lt;h2 id=&quot;permutations&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#permutations&quot; aria-label=&quot;permutations permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;permutations&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; permutations

permutations&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;iterable&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; r&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;permutations&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ABCD&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# AB AC AD BA BC BD CA CB CD DA DB DC&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;첫 번째 인자 &lt;code class=&quot;language-text&quot;&gt;iterable&lt;/code&gt;의 항목을 사용하여 길이 &lt;code class=&quot;language-text&quot;&gt;r&lt;/code&gt;이 되는 모든 순열을 갖는 이터레이터를 반환합니다. &lt;code class=&quot;language-text&quot;&gt;r&lt;/code&gt; 인자를 따로 지정하지 않는 경우 &lt;code class=&quot;language-text&quot;&gt;iterable&lt;/code&gt; 인자의 길이를 사용합니다.&lt;/p&gt;
&lt;h2 id=&quot;product&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#product&quot; aria-label=&quot;product permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;product&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; product

product&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;iterables&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; repeat&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# case 1&lt;/span&gt;
product&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ABCD&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;xy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# Ax Ay Bx By Cx Cy Dx Dy&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# case 2&lt;/span&gt;
product&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; repeat&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 000 001 010 011 100 101 110 111&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# case 3&lt;/span&gt;
product&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;AB&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; repeat&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# A0A0 A0A1 A0B0 A0B1 A1A0 A1A1 ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;*iterables&lt;/code&gt; 인자로 전달된 모든 iterable 객체들 간의 데카르트 곱 결과를 항목으로 갖는 이터레이터를 반환합니다. 모든 iterable 객체를 순회하는 for-루프와 동일한 결과를 반환합니다. 예를 들어, &lt;code class=&quot;language-text&quot;&gt;product(A, B)&lt;/code&gt; 는 &lt;code class=&quot;language-text&quot;&gt;(x, y) for x in A for y in B&lt;/code&gt; 와 같은 결과를 갖습니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;repeat&lt;/code&gt; 인자는 전달된 &lt;code class=&quot;language-text&quot;&gt;*iterables&lt;/code&gt; 인자를 &lt;code class=&quot;language-text&quot;&gt;repeat&lt;/code&gt; 반복한 데카르트 곱 결과를 계산할 때 사용합니다.&lt;/p&gt;
&lt;h2 id=&quot;repeat&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#repeat&quot; aria-label=&quot;repeat permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;repeat&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; repeat

repeat&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; times&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;repeat&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 10 10 10 10 10 10 ...&lt;/span&gt;
repeat&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 10 10 10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;object&lt;/code&gt; 인자를 반복해서 반환하는 이터레이터를 반환합니다. 만약 &lt;code class=&quot;language-text&quot;&gt;times&lt;/code&gt; 인자가 전달되면 &lt;code class=&quot;language-text&quot;&gt;times&lt;/code&gt; 만큼 반복하는 이터레이터를 반환하고, 전달되지 않거나 기본 값인 None이 전달되면 무한해서 반복하는 이터레이터가 생성됩니다.&lt;/p&gt;
&lt;h2 id=&quot;takewhile&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#takewhile&quot; aria-label=&quot;takewhile permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;takewhile&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; takewhile

takewhile&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;predicate&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; iterable&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;takewhile&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 1, 4&lt;/span&gt;
takewhile&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isdigit&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;123abc456&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# &quot;1&quot;, &quot;2&quot;, &quot;3&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;iterable&lt;/code&gt; 인자의 항목을 &lt;code class=&quot;language-text&quot;&gt;predicate&lt;/code&gt; 함수 인자에 넣었을 때 False를 반환할 때까지의 &lt;code class=&quot;language-text&quot;&gt;iterable&lt;/code&gt; 인자의 항목을 반환하는 이터레이터를 반환합니다.&lt;/p&gt;
&lt;h2 id=&quot;zip_longest&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#zip_longest&quot; aria-label=&quot;zip_longest permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;zip_longest&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; itertools &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; zip_longest

zip_longest&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;iterables&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fillvalue&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;zip_longest&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;#  (0, 0), (1, 1), (2, 2), (None, 3), (None. 4)&lt;/span&gt;
zip_longest&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ABCD&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;xy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fillvalue&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# (&quot;A&quot;, &quot;x&quot;), (&quot;B&quot;, &quot;y&quot;), (&quot;C&quot;, &quot;-&quot;), (&quot;D&quot;, &quot;-&quot;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;*iterables&lt;/code&gt; 인자로 전달된 모든 iterable 객체들 중 가장 길이가 긴 객체만큼의 길이를 가지며, 각 객체들의 항목을 원소로 갖는 튜플을 반환하는 이터레이터를 반환합니다. 각 객체의 길이가 서로 달라 항목을 꺼낼 수 없는 객체의 경우 대신 &lt;code class=&quot;language-text&quot;&gt;fillvalue&lt;/code&gt; 인자 값이 튜틀의 원소 값으로 채워집니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[about]]></title><description><![CDATA[Your name Thank you for reading my resume. If you want to contact me, Please send me an email.]]></description><link>https://hangjoo.github.io/resume-en/</link><guid isPermaLink="false">https://hangjoo.github.io/resume-en/</guid><pubDate>Sun, 27 Jan 2019 16:21:13 GMT</pubDate><content:encoded>&lt;h1 id=&quot;your-name&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#your-name&quot; aria-label=&quot;your name permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Your name&lt;/h1&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;p&gt;&lt;em&gt;Thank you for reading my resume. If you want to contact me, Please send me an email.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss>